@startuml ArquitecturaMejorada_Simulador
title "Arquitectura Optimizada - Simulador de Planificaci√≥n (4 Capas Reales)"

!define UI_COLOR #E8F4FD
!define APP_COLOR #E8F8F5  
!define DOMAIN_COLOR #FDF2E9
!define INFRA_COLOR #F3E5F5

package "src/" as src {
  [app.d.ts] as AppDts #EAEAEA
  [app.html] as AppHtml #EAEAEA
  
  package "routes/" as routes <<UI_COLOR>> {
    [+layout.svelte] as LayoutSvelte
    [+layout.ts] as LayoutTs  
    [+page.svelte] as PageHome
    [style.css] as StyleCss
    
    package "resultados/" {
      [+page.svelte] as PageResultados
    }
  }
  
  package "lib/" as lib {
    
    ' ===============================
    ' CAPA 4: UI (Solo Svelte + DTOs)
    ' ===============================
    package "ui/" as ui <<UI_COLOR>> {
      [types.ts] as UITypes
      note right of UITypes : **Solo DTOs de UI**\n‚Ä¢ ProcesoSimpleDTO\n‚Ä¢ ConfiguracionDTO\n‚Ä¢ ResultadoVisualizacionDTO
      
      package "components/" {
        [CargaArchivo.svelte] as CargaArchivo
        [TablaProcesos.svelte] as TablaProcesos  
        [ConfiguracionPanel.svelte] as ConfigPanel
        [GanttFixed.svelte] as GanttFixed
        [IndicadoresProceso.svelte] as IndicadoresProceso
        [IndicadoresTanda.svelte] as IndicadoresTanda
        [UtilizacionCPU.svelte] as UtilizacionCPU
        [TablaResumenComparativa.svelte] as TablaComparativa
        [PanelExportacion.svelte] as PanelExport
        [EventosSimulacion.svelte] as EventosComp
      }
      
      package "composables/" {
        [useSimulationUI.ts] as UseSimUI
        [useFileDownload.ts] as UseDownload
      }
      
      package "styles/" {
        [tokens.css] as TokensCSS
      }
    }
    
    ' ===============================
    ' CAPA 3: APPLICATION (Casos de Uso + DTOs)
    ' ===============================
    package "application/" as application <<APP_COLOR>> {
      [dto.ts] as AppDTOs
      note right of AppDTOs : **DTOs de Aplicaci√≥n**\n‚Ä¢ WorkloadDTO\n‚Ä¢ ConfigDTO\n‚Ä¢ DomainOutputDTO\n‚Ä¢ GanttDTO\n‚Ä¢ MetricsDTO
      
      package "usecases/" {
        [runSimulation.ts] as RunSimulation
        note right of RunSimulation : **Caso de Uso Principal**\n1. WorkloadDTO ‚Üí Process\n2. Instancia Simulation\n3. Devuelve DomainOutputDTO
        
        [buildGantt.ts] as BuildGantt  
        note right of BuildGantt : **Pure Mapping**\nevents ‚Üí GanttDTO
        
        [computeMetrics.ts] as ComputeMetrics
        note right of ComputeMetrics : **Pure Calculation**\nevents + totals ‚Üí MetricsDTO
      }
      
      [simuladorLogic.ts] as SimLogic
      note right of SimLogic : **Facade de Aplicaci√≥n**\nOrquesta casos de uso
    }
    
    ' ===============================  
    ' CAPA 2: DOMAIN (Motor √önico + Event Log como Verdad)
    ' ===============================
    package "domain/" as domain <<DOMAIN_COLOR>> {
      
      package "core/" {
        [Simulation.ts] as Simulation
        note top of Simulation : **üéØ MOTOR √öNICO**\n‚Ä¢ Consume EventQueue\n‚Ä¢ Aplica transiciones\n‚Ä¢ Programa eventos\n‚Ä¢ Cobra TIP/TFP/TCP\n‚Ä¢ Event Log = Verdad √önica
        
        [Clock.ts] as Clock
        [EventQueue.ts] as EventQueue  
        [Cpu.ts] as Cpu
        [ReadyQueue.ts] as ReadyQueue
        note right of ReadyQueue : **Pol√≠ticas Internas**\nFCFS/SJF/SRTF/Priority/RR\n(RR con ring buffer)
      }
      
      package "entities/" {
        [Process.ts] as Process
        note right of Process : **Estados + Transiciones**\n‚Ä¢ startTip(), finishTip()\n‚Ä¢ run(dt), blockIo()\n‚Ä¢ finishIo(), finishBurst()\n‚Ä¢ finishAll()
      }
      
      package "events/" {
        [Event.ts] as Event
        note right of Event : **Eventos Sellados**\nJobArrives | TipDone | Dispatch\nCpuBurstDone | QuantumExpired\nIoDone | ProcessDone
      }
      
      package "scheduling/" {
        [Scheduler.ts] as Scheduler
        note right of Scheduler : **API M√≠nima**\n‚Ä¢ pick(ready, now)\n‚Ä¢ shouldPreempt(current, candidate)\n‚Ä¢ onDispatch?(process, now)
        
        [FCFSScheduler.ts] as FCFSScheduler
        [RRScheduler.ts] as RRScheduler
        [PriorityScheduler.ts] as PriorityScheduler  
        [SJFScheduler.ts] as SJFScheduler
        [SRTFScheduler.ts] as SRTFScheduler
      }
      
      [types.ts] as DomainTypes
      note right of DomainTypes : **Solo Tipos de Dominio**\nNo DTOs de aplicaci√≥n
    }
    
    ' ===============================
    ' CAPA 1: INFRASTRUCTURE (Adaptadores + Detalles)  
    ' ===============================
    package "infrastructure/" as infrastructure <<INFRA_COLOR>> {
      
      package "parsers/" {
        [workloadParser.ts] as WorkloadParser
        [jsonParser.ts] as JsonParser
        [txtParser.ts] as TxtParser
        [csvParser.ts] as CsvParser
        [ParseError.ts] as ParseError
        note bottom of JsonParser : **Solo DTOs**\nNunca clases de dominio
      }
      
      package "exporters/" {
        [ganttExporter.ts] as GanttExporter
        [metricsExporter.ts] as MetricsExporter
        [eventExporter.ts] as EventExporter
        note bottom of GanttExporter : **Solo desde DTOs**\nGanttDTO ‚Üí SVG/PNG/PDF
      }
      
      package "adapters/" {
        [processFactory.ts] as ProcessFactory
        [schedulerFactory.ts] as SchedulerFactory
        note right of ProcessFactory : **Factory Methods**\nWorkloadDTO ‚Üí Process[]
      }
    }
  }
}

' ===============================
' FLUJO DE DEPENDENCIAS (Solo hacia abajo)
' ===============================

' UI ‚Üí Application (solo DTOs)
PageHome .down.> SimLogic : **usa DTOs**
PageResultados .down.> SimLogic : **caraga DTOs**
UseSimUI .down.> RunSimulation : **WorkloadDTO ‚Üí DomainOutputDTO**
UseDownload .down.> GanttExporter : **GanttDTO ‚Üí archivos**

' Application ‚Üí Domain (casos de uso)
RunSimulation .down.> ProcessFactory : **WorkloadDTO ‚Üí Process[]**
RunSimulation .down.> SchedulerFactory : **configDTO ‚Üí Scheduler**
RunSimulation .down.> Simulation : **motor √∫nico**
BuildGantt .down.> Event : **lee events**
ComputeMetrics .down.> Event : **lee events**

' Application ‚Üî Infrastructure (puertos/DTOs)
RunSimulation .left.> WorkloadParser : **archivos ‚Üí WorkloadDTO**
BuildGantt .right.> GanttExporter : **GanttDTO ‚Üí formatos**
ComputeMetrics .right.> MetricsExporter : **MetricsDTO ‚Üí formatos**

' Domain (motor interno) 
Simulation .down.> EventQueue : **programa eventos**
Simulation .down.> Process : **aplica transiciones**
Simulation .down.> Cpu : **cobra TCP**  
Simulation .down.> ReadyQueue : **maneja colas**
Simulation .down.> Scheduler : **usa estrategias**

FCFSScheduler .up.|> Scheduler
RRScheduler .up.|> Scheduler  
PriorityScheduler .up.|> Scheduler
SJFScheduler .up.|> Scheduler
SRTFScheduler .up.|> Scheduler

' Infrastructure adapta
ProcessFactory .down.> Process : **crea desde DTO**
SchedulerFactory .down.> Scheduler : **instancia estrategias**

' ===============================
' ANOTACIONES ARQUITECT√ìNICAS
' ===============================

note top of domain
**üéØ DOMINIO PURO (Sin dependencias externas)**

**Reglas de SO (un solo lugar - Simulation):**
‚Ä¢ **TIP:** NUEVO ‚Üí LISTO (evento TipDone)  
‚Ä¢ **TCP:** Dispatch (L‚ÜíC) y Expropiaci√≥n (C‚ÜíL)
‚Ä¢ **TFP:** Solo ProcessDone (C‚ÜíT)

**Salida √∫nica del dominio:**
```ts
type DomainOutput = {
  events: SimEvent[];        // log inmutable COMPLETO
  processes: ProcessSnapshot[]; // finales  
  totals: { user, os, idle, makespan }
}
```

**Event Log = Single Source of Truth**
‚Ä¢ Gantt se reconstruye SOLO desde events
‚Ä¢ M√©tricas se calculan SOLO desde events + totals
‚Ä¢ Si no est√° en el log, NO EXISTE
end note

note top of application  
**üìã APLICACI√ìN (Casos de Uso - orquesta, no calcula)**

**Responsabilidades:**
‚Ä¢ `RunSimulation`: WorkloadDTO ‚Üí DomainOutputDTO
‚Ä¢ `BuildGantt`: events ‚Üí GanttDTO (puro mapeo)
‚Ä¢ `ComputeMetrics`: events + totals ‚Üí MetricsDTO

**Invariantes:**
‚Ä¢ NO re-calcula overheads (lee del dominio)
‚Ä¢ Solo transforma DTOs
‚Ä¢ No conoce detalles internos del motor
end note

note top of infrastructure
**üîß INFRAESTRUCTURA (Detalles t√©cnicos)**

**Adaptadores:**
‚Ä¢ Parsers: archivos ‚Üí WorkloadDTO
‚Ä¢ Exporters: DTOs ‚Üí formatos
‚Ä¢ Factories: DTOs ‚Üí entidades de dominio

**Regla clave:**
‚Ä¢ NUNCA referencian clases de domain
‚Ä¢ Solo trabajan con DTOs
end note

note top of ui
**üé® UI (Componentes Svelte)**

**Principios:**
‚Ä¢ Solo DTOs, nunca clases de dominio
‚Ä¢ Composables manejan estado reactivo
‚Ä¢ Componentes puros de presentaci√≥n

**Flujo de datos:**
‚Ä¢ Usuario ‚Üí DTOs ‚Üí Application ‚Üí Domain
‚Ä¢ Domain ‚Üí DTOs ‚Üí UI ‚Üí Usuario
end note

' ===============================
' ARCHIVOS ELIMINADOS/INTEGRADOS
' ===============================

note bottom of src
**üìÅ CAMBIOS EN ESTRUCTURA DE ARCHIVOS**

**üóëÔ∏è ELIMINAR (capa core redundante):**
‚Ä¢ `core/index.ts`, `core/state.ts`
‚Ä¢ `core/registroEventos.ts`, `core/events.ts`  
‚Ä¢ `core/adaptadorSimuladorDominio.ts`
‚Ä¢ `core/workloadAdapter.ts`
‚Ä¢ `services/index.ts`

**üîÑ MOVER/RENOMBRAR:**
‚Ä¢ `core/eventQueue.ts` ‚Üí `domain/core/EventQueue.ts`
‚Ä¢ `core/priorityQueue.ts` ‚Üí implementaci√≥n interna de EventQueue
‚Ä¢ `entities/Simulador.ts` ‚Üí `domain/core/Simulation.ts` (reescribir)
‚Ä¢ `services/GanttBuilder.ts` ‚Üí `application/usecases/buildGantt.ts`
‚Ä¢ `services/MetricsCalculator.ts` ‚Üí `application/usecases/computeMetrics.ts`

**‚ú® CREAR NUEVOS:**
‚Ä¢ `application/dto.ts` (todos los DTOs)
‚Ä¢ `domain/core/Clock.ts`, `domain/core/Cpu.ts`
‚Ä¢ `domain/core/ReadyQueue.ts`
‚Ä¢ `infrastructure/adapters/processFactory.ts`
‚Ä¢ `infrastructure/adapters/schedulerFactory.ts`
end note

@enduml
