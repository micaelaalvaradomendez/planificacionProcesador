@startuml Diagrama de Clases - Simulador de Planificaci√≥n de Procesos

!theme plain
skinparam backgroundColor #FFFFFF
skinparam classBackgroundColor #F8F9FA
skinparam classBorderColor #6C757D
skinparam stereotypeCBackgroundColor #E3F2FD
skinparam packageBackgroundColor #F5F5F5
skinparam packageBorderColor #9E9E9E

title Diagrama de Clases - Simulador de Planificaci√≥n de Procesos\nArquitectura por Capas (Clean Architecture)

' ===============================
' CAPA DE DOMINIO (Domain Layer)
' ===============================
package "üèõÔ∏è DOMAIN LAYER" as domain {
  
  package "üì¶ Entities" as entities {
    class Proceso {
      ' Propiedades inmutables
      +id: string {readonly}
      +arribo: number {readonly}
      +rafagasCPU: number {readonly}
      +duracionCPU: number {readonly}
      +duracionIO: number {readonly}
      +prioridad: number {readonly}
      
      ' Estado din√°mico
      +estado: EstadoProceso
      +rafagasRestantes: number
      +restanteCPU: number
      +restanteIO: number
      +restanteTotalCPU: number
      
      ' Timestamps para m√©tricas
      +inicioTIP?: number
      +finTIP?: number
      +inicio?: number
      +fin?: number
      +tiempoListoTotal: number
      --
      +constructor(data: ProcesData)
      +iniciarTIP(tiempo: number): void
      +finalizarTIP(tiempo: number): void
      +activar(tiempo: number): void
      +expropiar(tiempo: number): void
      +completarCPU(tiempo: number): void
      +terminar(tiempo: number): void
    }

    class Simulador {
      ' Estado del sistema
      +tiempoActual: number
      +procesoActualCPU?: Proceso
      +cpuOcupadaHasta: number
      +readyQueue: Proceso[]
      +procesosBloqueados: Proceso[]
      +procesosTerminados: Proceso[]
      +todosLosProcesos: Map<string, Proceso>
      +colaEventos: PriorityQueue<Evento>
      
      ' M√©tricas de tiempo
      +tiempoTotalInactivo: number
      +tiempoTotalSO: number
      +tiempoTotalUsuario: number
      +registroEventos: Evento[]
      +parametros: ParametrosSimulacion {readonly}
      --
      +constructor(parametros: ParametrosSimulacion)
      +agregarProceso(proceso: Proceso): void
      +programarEvento(tiempo: number, tipo: TipoEvento, id: string): void
      +procesarSiguienteEvento(): Evento | undefined
      +esCpuDisponible(): boolean
      +asignarProcesoACpu(proceso: Proceso): void
      +agregarAReadyQueue(proceso: Proceso): void
      +obtenerEstadisticas(): Object
    }
  }

  package "‚öôÔ∏è Algorithms" as algorithms {
    interface EstrategiaScheduler {
      +nombre: string {readonly}
      +soportaExpropiacion: boolean {readonly}
      +requiereQuantum: boolean {readonly}
      --
      +alLlegarProceso(proceso: Proceso, tiempo: number): void
      +elegirSiguiente(colaListos: Proceso[], tiempo: number): Proceso?
      +debeExpropiar?(actual: Proceso, candidato: Proceso, tiempo: number): boolean
      +ordenarColaListos(colaListos: Proceso[]): void
    }

    abstract class EstrategiaSchedulerBase {
      +nombre: string {readonly, abstract}
      +soportaExpropiacion: boolean {readonly, abstract}
      +requiereQuantum: boolean {readonly, abstract}
      --
      +elegirSiguiente(colaListos: Proceso[], tiempo: number): Proceso? {abstract}
      +ordenarColaListos(colaListos: Proceso[]): void {abstract}
      +debeExpropiar?(actual: Proceso, candidato: Proceso, tiempo: number): boolean
    }

    class EstrategiaSchedulerFcfs {
      +nombre: "FCFS"
      +soportaExpropiacion: false
      +requiereQuantum: false
      --
      +elegirSiguiente(): Proceso?
      +ordenarColaListos(): void
    }

    class EstrategiaSchedulerSjf {
      +nombre: "SJF"
      +soportaExpropiacion: false
      +requiereQuantum: false
      --
      +elegirSiguiente(): Proceso?
      +ordenarColaListos(): void
    }

    class EstrategiaSchedulerSrtf {
      +nombre: "SRTF"
      +soportaExpropiacion: true
      +requiereQuantum: false
      --
      +elegirSiguiente(): Proceso?
      +ordenarColaListos(): void
      +debeExpropiar(): boolean
    }

    class EstrategiaSchedulerRoundRobin {
      +nombre: "RR"
      +soportaExpropiacion: true
      +requiereQuantum: true
      --
      +elegirSiguiente(): Proceso?
      +ordenarColaListos(): void
      +alTickQuantum(): boolean
    }

    class EstrategiaSchedulerPrioridad {
      +nombre: "PRIORITY"
      +soportaExpropiacion: true
      +requiereQuantum: false
      --
      +elegirSiguiente(): Proceso?
      +ordenarColaListos(): void
      +debeExpropiar(): boolean
    }
  }

  package "üéØ Services" as services {
    class MetricsCalculator {
      +calcularMetricas(procesos: Proceso[], tiempoTotal: number): Metrics
      +calcularEstadisticasExtendidas(eventos: SimEvent[]): EstadisticasExtendidas
      +generarAnalisisRendimiento(metricas: Metrics[]): AnalisisRendimiento
      +compararMetricas(m1: Metrics, m2: Metrics): MetricasComparativas
    }

    class GanttBuilder {
      +construirDiagrama(eventos: SimEvent[]): DiagramaGantt
      +validarConsistencia(segmentos: GanttSlice[]): boolean
      +calcularEstadisticas(segmentos: GanttSlice[]): EstadisticasGantt
      +optimizarVisualizacion(segmentos: GanttSlice[]): GanttSlice[]
    }
  }

  package "üìä Types & Events" as types {
    enum EstadoProceso {
      NUEVO
      LISTO
      CORRIENDO
      BLOQUEADO
      TERMINADO
    }

    enum TipoEvento {
      JOB_LLEGA
      ENTRA_SISTEMA
      DISPATCH
      FIN_RAFAGA_CPU
      QUANTUM_EXPIRES
      IO_COMPLETA
      PROCESO_TERMINA
    }

    class Evento {
      +tiempo: number
      +tipo: TipoEvento
      +idProceso: string
      +descripcion?: string
      --
      +constructor(tiempo: number, tipo: TipoEvento, id: string)
      +compare(otro: Evento): number
    }

    class PriorityQueue<T> {
      -items: T[]
      -compareFn: Function
      --
      +enqueue(item: T): void
      +dequeue(): T | undefined
      +isEmpty(): boolean
    }
  }
}

' ===============================
' CAPA DE APLICACI√ìN (Application Layer) 
' ===============================
package "üìã APPLICATION LAYER" as application {
  
  package "üéÆ Use Cases" as usecases {
    class RunSimulation {
      +ejecutarSimulacion(workload: Workload): Promise<SimulationResult>
      +configurarSimulador(parametros: ParametrosSimulacion): Simulador
      +procesarResultados(estado: SimState): SimulationResult
    }

    class BuildGantt {
      +construirGantt(eventos: SimEvent[]): DiagramaGantt
      +validarEventos(eventos: SimEvent[]): boolean
      +optimizarVisualizacion(gantt: DiagramaGantt): DiagramaGantt
    }

    class ComputeStatistics {
      +calcularMetricas(procesos: Proceso[], tiempo: number): Metrics
      +generarReporte(metricas: Metrics): string
      +compararAlgoritmos(resultados: SimulationResult[]): AnalisisRendimiento
    }
  }

  class SimuladorLogic {
    +cargarArchivoProcesos(file: File): Promise<ResultadoCarga>
    +validarConfiguracion(config: ConfiguracionSimulacion): ResultadoValidacion
    +ejecutarSimulacion(procesos: ProcesoSimple[], config: ConfiguracionSimulacion): Promise<ResultadoSimulacion>
    +guardarDatosSimulacion(datos: DatosSimulacionCompleta): Promise<void>
    +cargarDatosSimulacion(): Promise<DatosSimulacionCompleta?>
  }

  class UseSimulationUI {
    +limpiarResultadosPrevios(): void
    +cargarArchivoUI(): Promise<void>
    +cambiarModoArchivo(mode: string): void
    +establecerConfiguracion(): void
    +ejecutarSimulacion(): Promise<void>
    +reiniciarTodo(): void
  }
}

' ===============================
' CAPA DE N√öCLEO (Core Layer)
' ===============================
package "‚ö° CORE LAYER" as core {
  
  class AdaptadorSimuladorDominio {
    -simuladorDominio: Simulador
    -state: SimState
    -procesosDominio: Map<string, Proceso>
    -estrategia: EstrategiaScheduler
    --
    +constructor(workload: Workload)
    +ejecutar(): ResultadoSimulacionDominio
    +procesarEventos(): void
    -crearEstrategia(algoritmo: Algoritmo): EstrategiaScheduler
    -mapearEventos(): EventoInterno[]
  }

  class AdaptadorEntidadesDominio {
    +{static} workloadAProcesos(workload: Workload): Proceso[]
    +{static} workloadAParametrosSimulacion(workload: Workload): ParametrosSimulacion
    +{static} procesoSimpleAProcesData(simple: ProcesoSimple): ProcesData
  }

  class SimState {
    +procesos: Map<string, any>
    +ready: string[]
    +running?: string
    +blocked: string[]
    +finished: string[]
    +cpuTime: number
    +currentTime: number
  }
}

' ===============================
' CAPA DE INFRAESTRUCTURA (Infrastructure Layer)
' ===============================
package "üîß INFRASTRUCTURE LAYER" as infrastructure {
  
  package "üìÅ Parsers" as parsers {
    class WorkloadParser {
      +cargarArchivo(file: File, mode: string, policy: Policy, tip: number, tfp: number, tcp: number, quantum?: number): Promise<ResultadoCarga>
    }

    class JsonParser {
      +parseJsonToWorkload(file: File): Promise<Workload>
      +validarEstructuraJson(data: any): boolean
      +extraerProcesosJson(data: any): ProcessSpec[]
    }

    class TxtParser {
      +parseTxtToWorkload(content: string, config: ParseConfig, filename: string): Workload
      +parsearLineaProceso(linea: string, separador: string): ProcessSpec
      +validarFormatoTxt(content: string): boolean
    }
  }

  package "üì§ IO & Export" as io {
    class GanttExporter {
      +exportarJson(gantt: DiagramaGantt): string
      +exportarSvg(gantt: DiagramaGantt): string
      +exportarAscii(gantt: DiagramaGantt): string
      +generarReportePdf(gantt: DiagramaGantt): Blob
    }

    class EventLogger {
      +logearEvento(evento: SimEvent): void
      +exportarLog(eventos: SimEvent[]): string
      +filtrarEventos(eventos: SimEvent[], filtros: any): SimEvent[]
    }

    class ExportMetrics {
      +exportarCsv(metricas: Metrics): string
      +exportarJson(metricas: Metrics): string
      +generarReporte(metricas: Metrics): string
    }
  }
}

' ===============================
' CAPA DE UI (User Interface Layer)
' ===============================
package "üé® UI LAYER" as ui {
  
  package "üß© Components" as components {
    class CargaArchivo {
      +archivo: File?
      +cargando: boolean
      +error: string?
      --
      +onArchivoSeleccionado(event: CustomEvent): void
      +onArchivoRemovido(): void
      +validarArchivo(file: File): boolean
    }

    class TablaProcesos {
      +procesos: ProcesoSimple[]
      +modoEdicion: boolean
      --
      +agregarProceso(): void
      +eliminarProceso(index: number): void
      +editarProceso(index: number, proceso: ProcesoSimple): void
    }

    class ConfiguracionPanel {
      +configuracion: ConfiguracionSimulacion
      +validacion: ResultadoValidacion
      --
      +onConfiguracionChange(config: ConfiguracionSimulacion): void
      +validarQuantum(valor: number): boolean
      +resetearConfiguracion(): void
    }

    class GanttFixed {
      +gantt: DiagramaGantt
      +zoom: number
      +filtros: FiltrosGantt
      --
      +renderizarSegmentos(): void
      +manejarZoom(factor: number): void
      +exportarImagen(): void
    }

    class EventosSimulacion {
      +eventos: SimEvent[]
      +filtros: FiltrosEvento
      --
      +filtrarEventos(): SimEvent[]
      +exportarEventos(): void
      +buscarEvento(criterio: string): void
    }
  }

  package "üìä Data Types" as uitypes {
    class ProcesoSimple {
      +nombre: string
      +llegada: number
      +rafaga: number
      +prioridad: number
    }

    class ConfiguracionSimulacion {
      +policy: Policy
      +tip: number
      +tfp: number
      +tcp: number
      +quantum?: number
    }

    class DatosSimulacionCompleta {
      +procesos: ProcesoSimple[]
      +configuracion: ConfiguracionSimulacion
      +resultados: ResultadoSimulacion
      +timestamp: string
    }
  }
}

' ===============================
' RELACIONES ENTRE CAPAS
' ===============================

' Dominio - Entities y Algorithms
Simulador *-- "many" Proceso : gestiona
Simulador *-- PriorityQueue : usa
Simulador *-- "many" Evento : programa
Proceso --> EstadoProceso : estado actual
EstrategiaSchedulerBase ..|> EstrategiaScheduler : implements
EstrategiaSchedulerFcfs --|> EstrategiaSchedulerBase : extends
EstrategiaSchedulerSjf --|> EstrategiaSchedulerBase : extends
EstrategiaSchedulerSrtf --|> EstrategiaSchedulerBase : extends
EstrategiaSchedulerRoundRobin --|> EstrategiaSchedulerBase : extends
EstrategiaSchedulerPrioridad --|> EstrategiaSchedulerBase : extends

' Dominio - Services
MetricsCalculator ..> Proceso : analiza
GanttBuilder ..> Evento : construye desde

' Application - Use Cases
RunSimulation --> AdaptadorSimuladorDominio : delega a
BuildGantt --> GanttBuilder : usa
ComputeStatistics --> MetricsCalculator : usa
SimuladorLogic --> RunSimulation : orquesta
SimuladorLogic --> BuildGantt : usa
SimuladorLogic --> ComputeStatistics : usa
UseSimulationUI --> SimuladorLogic : delega a

' Core - Adaptadores
AdaptadorSimuladorDominio --> Simulador : encapsula
AdaptadorSimuladorDominio --> EstrategiaScheduler : configura
AdaptadorEntidadesDominio ..> Proceso : factory
AdaptadorEntidadesDominio ..> ProcesoSimple : transforma

' Infrastructure - Parsers e IO
WorkloadParser --> JsonParser : usa
WorkloadParser --> TxtParser : usa
GanttExporter ..> GanttBuilder : exporta desde
EventLogger ..> Evento : registra
ExportMetrics ..> MetricsCalculator : exporta desde

' UI - Components
CargaArchivo --> WorkloadParser : carga archivos con
TablaProcesos --> ProcesoSimple : muestra
ConfiguracionPanel --> ConfiguracionSimulacion : configura
GanttFixed --> GanttBuilder : visualiza
EventosSimulacion --> EventLogger : muestra

' Cross-layer dependencies
SimuladorLogic --> WorkloadParser : carga archivos
SimuladorLogic --> GanttExporter : exporta con
UseSimulationUI --> CargaArchivo : integra
UseSimulationUI --> ConfiguracionPanel : integra

' Notes para clarificaci√≥n
note top of domain : "Capa de Dominio\nL√≥gica de negocio pura\nSin dependencias externas"
note top of application : "Capa de Aplicaci√≥n\nCasos de uso y orquestaci√≥n\nCoordina dominio e infraestructura"
note top of core : "Capa de N√∫cleo\nAdaptadores entre capas\nPatr√≥n Adapter"
note top of infrastructure : "Capa de Infraestructura\nPersistencia, parsing, export\nImplementa ports del dominio"
note top of ui : "Capa de UI\nComponentes Svelte\nManejo de estado reactivo"

@enduml
