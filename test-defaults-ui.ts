#!/usr/bin/env npx tsx

/**
 * Test espec√≠fico para verificar valores por defecto TIP/TFP/TCP en UI
 */

import { validarConfiguracion } from './src/lib/application/simuladorLogic.js';
import type { ConfiguracionSimulacion } from './src/lib/application/simuladorLogic.js';

console.log('üß™ TEST: Valores por defecto TIP/TFP/TCP');
console.log('=======================================');

// Simular la configuraci√≥n inicial de la UI despu√©s del cambio
const configuracionUI: ConfiguracionSimulacion = {
  policy: 'FCFS',
  tip: 1,  // Nuevos valores por defecto docentes
  tfp: 1,
  tcp: 1,
  quantum: undefined
};

console.log('üìã Configuraci√≥n inicial UI:');
console.log('  TIP:', configuracionUI.tip);
console.log('  TFP:', configuracionUI.tfp);
console.log('  TCP:', configuracionUI.tcp);
console.log('  Policy:', configuracionUI.policy);
console.log('');

// Test 1: Validaci√≥n de la configuraci√≥n por defecto
const validacion = validarConfiguracion(configuracionUI);
console.log('üìä Validaci√≥n configuraci√≥n por defecto:');
console.log('  V√°lida:', validacion.valida);
console.log('  Errores:', validacion.errores);

if (validacion.valida) {
  console.log('  ‚úÖ Configuraci√≥n por defecto V√ÅLIDA');
} else {
  console.log('  ‚ùå Configuraci√≥n por defecto INV√ÅLIDA');
  throw new Error('Los nuevos defaults no pasan validaci√≥n');
}

// Test 2: Verificar que sigue permitiendo valores = 0 (flexibilidad)
const configuracionSinOverhead: ConfiguracionSimulacion = {
  policy: 'FCFS',
  tip: 0,
  tfp: 0,
  tcp: 0,
  quantum: undefined
};

const validacion0 = validarConfiguracion(configuracionSinOverhead);
console.log('');
console.log('üìä Validaci√≥n TIP/TFP/TCP = 0 (flexibilidad):');
console.log('  V√°lida:', validacion0.valida);
console.log('  Errores:', validacion0.errores);

if (validacion0.valida) {
  console.log('  ‚úÖ TIP/TFP/TCP = 0 sigue siendo V√ÅLIDO (flexibilidad mantenida)');
} else {
  console.log('  ‚ùå TIP/TFP/TCP = 0 INV√ÅLIDO - se perdi√≥ flexibilidad');
  throw new Error('La validaci√≥n se volvi√≥ demasiado restrictiva');
}

// Test 3: Verificar que Round Robin tambi√©n funciona con nuevos defaults
const configuracionRR: ConfiguracionSimulacion = {
  policy: 'RR',
  tip: 1,
  tfp: 1,
  tcp: 1,
  quantum: 2
};

const validacionRR = validarConfiguracion(configuracionRR);
console.log('');
console.log('üìä Validaci√≥n RR con nuevos defaults:');
console.log('  V√°lida:', validacionRR.valida);
console.log('  Errores:', validacionRR.errores);

if (validacionRR.valida) {
  console.log('  ‚úÖ RR con nuevos defaults V√ÅLIDO');
} else {
  console.log('  ‚ùå RR con nuevos defaults INV√ÅLIDO');
  throw new Error('RR no funciona con los nuevos defaults');
}

// Test 4: Comparar con valores t√≠picos de tests
const valoresTypicos = [1, 0.5, 2];
console.log('');
console.log('üìà Verificaci√≥n valores t√≠picos usados en tests:');

valoresTypicos.forEach(valor => {
  const config: ConfiguracionSimulacion = {
    policy: 'FCFS',
    tip: valor,
    tfp: valor,
    tcp: valor,
    quantum: undefined
  };
  
  const validacion = validarConfiguracion(config);
  console.log(`  TIP/TFP/TCP = ${valor}:`, validacion.valida ? '‚úÖ V√ÅLIDO' : '‚ùå INV√ÅLIDO');
});

console.log('');
console.log('üéØ RESUMEN:');
console.log('============');
console.log('‚úÖ Nuevos defaults (TIP/TFP/TCP = 1) son V√ÅLIDOS');
console.log('‚úÖ Flexibilidad mantenida (permite 0)');
console.log('‚úÖ Compatibilidad con todos los algoritmos');
console.log('‚úÖ Alineaci√≥n con pr√°ctica docente t√≠pica');
console.log('');
console.log('üìö BENEFICIO EDUCATIVO:');
console.log('- Demo arranca con overhead del SO realista');
console.log('- Estudiantes ven impacto de TIP/TFP/TCP desde el inicio');
console.log('- Consistencia con ejercicios de c√°tedra t√≠picos');

console.log('');
console.log('üéØ TEST DEFAULTS COMPLETADO');
console.log('===========================');