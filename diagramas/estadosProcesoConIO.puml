@startuml 04-estados-proceso-con-io
title Estados del Proceso con E/S – Regla: C→B sólo si quedan ráfagas

skinparam state {
  BackgroundColor White
  BorderColor Black
}

state "NUEVO (N)" as N
state "LISTO (L)" as L
state "CORRIENDO (C)" as C
state "BLOQUEADO (B)\n(esperando E/S)" as B
state "TERMINADO (T)" as T

[*] --> N : arribo
N --> L : N→L (admisión)

L --> C : L→C (despacho a CPU)
C --> B : C→B [quedan ráfagas] / programar B→L @ t+bloqueoES
C --> T : C→T [última ráfaga completada]

B --> L : B→L (fin de E/S)\nNO consume CPU

' Invariantes y reglas
note bottom
  Reglas clave:
  • C→B sólo si la ráfaga completada NO era la última.
  • Si era la última, C→T (finaliza).
  • B representa espera de E/S (sin uso de CPU).
  • **B→L no consume CPU**; el costo real es bloqueoES (latencia) 
    entre C→B@t y B→L@(t+bloqueoES).
  • B→L se programa a (t + bloqueoES). Si bloqueoES=0, coincide con t.
  • Cada proceso está en un único estado a la vez.
  • Transiciones legales mínimas: N→L, L→C, C→B, B→L, C→T.
  • **Costos**: TIP desplaza N→L; TCP desplaza el inicio del slice (L→C); 
    TFP desplaza C→T. **No son CPU**.
  • El estado CORRIENDO (C) termina su uso de CPU en el fin de la ráfaga (tFinCPU).
    El evento C→T puede ocurrir después (tFinCPU + TFP), pero no representa uso de CPU.
end note

@enduml