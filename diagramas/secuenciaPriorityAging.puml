@startuml secuencia-priority-aging
title Secuencia — Priority con Aging

participant "Motor" as M
participant "SchedulerPriority" as SP
participant "ReadyQueue" as RQ
participant "Proceso" as P

note over M, P
**Convención**: Menor número = Mayor prioridad
p=1 > p=2 > p=3... (1 es máxima prioridad)
end note

== Admisión con Prioridad Base ==
M -> SP: onAdmit(pid, t)
SP -> P: getPrioridadBase()
P --> SP: prioridadBase (ej: 3)
SP -> SP: pEfectiva = prioridadBase\n(sin aging inicial)
SP -> RQ: enqueue(pid, pEfectiva)
note right: Solo procesos en LISTO envejecen

== Aging en LISTO (cada tick) ==
loop cada tick t
  M -> SP: onTick(t)
  SP -> RQ: getAll()
  RQ --> SP: [pids en LISTO]
  loop para cada pid en LISTO
    SP -> SP: aging(pid, deltaTime)
    note right
    **Solo envejece en LISTO**
    pEfectiva = max(1, pBase - aging/factorAging)
    NO envejece si está en CPU
    end note
    SP -> RQ: updatePriority(pid, nuevaPEfectiva)
  end
end

== Selección con Prioridad Efectiva ==
M -> SP: next()
SP -> RQ: peekAll()
RQ --> SP: [(pid, pEfectiva)]
SP -> SP: elegir min(pEfectiva)\ndesempate por orden FIFO
SP --> M: pidElegido

== Expropiación por Prioridad ==
M -> M: N→L o B→L (nuevo proceso)
M -> SP: onReady(nuevoPid, t)
SP -> P: getPrioridadEfectiva(nuevoPid)
P --> SP: pEff(nuevo)

alt CPU libre
  M -> SP: next()
  SP --> M: nuevoPid (despacho directo)
else CPU ocupada
  M -> SP: compareForPreemption(actual, nuevo)
  SP -> P: getPrioridadEfectiva(actual)
  P --> SP: pEff(actual)
  
  alt pEff(nuevo) < pEff(actual)
    SP --> M: true (expropia)
    note right
    **Criterio**: pEff menor = mayor prioridad
    Ejemplo: pEff=1 expropia a pEff=3
    end note
    M -> M: programar C→L @ t
    M -> M: despacharSiLibre(t) más tarde
  else pEff(nuevo) >= pEff(actual)
    SP --> M: false (no expropia)
    M -> RQ: enqueue(nuevoPid)
  end
end

== Orden de Eventos (Motor) ==
note over M
**Prioridades de eventos**:
1: C→T (fin natural/TFP)
2: C→B (bloqueo E/S)  
3: C→L (expropiación)
4: B→L (fin E/S)
5: N→L (arribo)
6: L→C (dispatch)

**NO despachar desde C→T**
Usar despacharSiLibre(t) post-evento
end note

@enduml