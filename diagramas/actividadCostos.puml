@startuml 05-actividad-costos
title Actividad – Dónde aplicar TIP / TCP / TFP sin contaminar ráfagas/quantum

start
:pop() -> evento = (t, tipo, pid);

if (tipo == "N→L_raw") then (sí)
  :t_adm = t + TIP;
  :push( N→L @ t_adm, pid );
elseif (tipo == "N→L") then (sí)
  :onAdmit(pid);\n(READY.enqueue)
  :si CPU libre -> push( L→C @ t, pid );
elseif (tipo == "L→C") then (sí)
  :t_start = t + TCP;  ' desplazar INICIO de slice
  :abrir slice en t_start;
  if (última ráfaga?) then (sí)
    :t_fin = t_start + dur_rafaga;
    :push( L→C @ t_fin, pid=?, data={releasePid, releaseAt=t_fin} )  ' gatillo de cierre + despacho;
    :push( C→T @ (t_fin + TFP), pid, data={realFinishTime=t_fin} )   ' evento administrativo;
  else (no)
    :t_fin = t_start + dur_rafaga;
    :push( C→B @ t_fin, pid );          ' sin TFP aquí
    :push( B→L @ (t_fin + bloqueoES), pid );
  endif
elseif (tipo == "C→B") then (sí)
  :cerrar slice [t_start, t_fin];\nliberar CPU;
  :despachar si libre (guard por tick);
elseif (tipo == "B→L") then (sí)
  :avanzar a próxima ráfaga;\nREADY.enqueue(pid);
  :despachar si CPU libre (guard por tick);\n' NO abrir/cerrar slice aquí;
elseif (tipo == "C→T") then (sí)
  :cerrar slice si corresponde;\nliberar CPU;
  :despachar si CPU libre (guard por tick);
else (otro)
  :ignorar/loggear;
endif

stop

legend right
  Puntos exactos de costos:
   • TIP: al convertir N→L_raw en N→L => t = t + TIP.
   • TCP: al procesar L→C, antes de abrir slice:
          t_start = t + TCP; ráfaga/quantum cuentan desde t_start.
   • TFP: sólo en la última ráfaga: C→T @ (t_fin + TFP).
  Notas:
   • TIP/TCP/TFP NO son CPU NI servicio.
   • B→L NO usa CPU; el costo real es bloqueoES.
   • Mantener guard por tick para evitar doble L→C en mismo t.
   • La CPU se libera y el slice se cierra en t_fin (fin de CPU útil).
   • El evento C→T se usa solo para registro final (no CPU).
   • El despacho del siguiente proceso se programa en t_fin, no en t + TFP.
endlegend
@enduml
