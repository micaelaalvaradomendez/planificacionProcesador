@startuml Estructura - Mapa de Archivos

!define MODEL_COLOR #E8F4FD
!define ENGINE_COLOR #FDF2E9
!define SCHED_COLOR #E8F8F5
!define IO_COLOR #F3E5F5
!define METRICS_COLOR #EBF5FB
!define GANTT_COLOR #FADBD8
!define STORES_COLOR #FDEAA7
!define ROUTES_COLOR #D5E8D4
!define TEST_COLOR #FFF2CC

skinparam shadowing false
skinparam defaultTextAlignment left
skinparam packageStyle rectangle
skinparam ArrowColor #666666
skinparam PackageBorderColor #999999
skinparam RectangleBorderColor #BBBBBB
skinparam NoteBackgroundColor #FFFEF5
skinparam NoteBorderColor #E6D8A8
skinparam minClassWidth 180
skinparam maxMessageSize 150
skinparam nodesep 20
skinparam ranksep 30
hide circle

title Proyecto Simulador de Planificación – Mapa de Archivos

package "src" as SRC {

  package "lib" as LIB {

      package "model" as MODEL {
        rectangle "proceso.ts" as proceso_ts
        rectangle "rafaga.ts" as rafaga_ts
        rectangle "estados.ts" as estados_ts
        rectangle "costos.ts" as costos_ts
        
        proceso_ts -[hidden]down-> rafaga_ts
        rafaga_ts -[hidden]down-> estados_ts
        estados_ts -[hidden]down-> costos_ts

        note right of proceso_ts
          **✓ Implementado**
          • Tipos de Proceso (pid, arribo, ráfagas)
          • Estado del proceso (N, L, C, B, F)
          • servicioTotal() - suma de ráfagas CPU
          • isProcesoValido() - validación básica
        end note

        note right of rafaga_ts
          **✓ Implementado**
          • Utilidades para manejar rafagas
          • Índice/actual y chequeos de restantes
          • rafagaActual() - obtiene ráfaga por índice
          • quedanRafagas() - verifica ráfagas restantes
        end note

        note right of estados_ts
          **✓ Implementado**
          • Definición de estados
          • Reglas de transición válidas (invariantes)
          • Estados canónicos (N,L,C,B,F)
          • isTransicionLegal() - validador de transiciones
          • assertTransicionLegal() - error si ilegal
          • transicionarEstado() - transición inmutable
        end note

        note right of costos_ts
          **✓ Implementado**
          • Interface Costos (TIP, TCP, TFP, bloqueoES)
          • COSTOS_DEF - defaults (bloqueoES=25)
          • validarCostos() - verifica valores ≥ 0
          • makeCostos() - constructor saneado
        end note
      }

      package "engine" as ENGINE {
        rectangle "types.ts" as engine_types_ts
        rectangle "queue.ts" as queue_ts
        rectangle "engine.ts" as engine_ts
        
        engine_types_ts -[hidden]down-> queue_ts
        queue_ts -[hidden]down-> engine_ts

        note right of engine_types_ts
          **✓ Implementado**
          • Tipos del motor (EventType, SimEvent)
          • Estructura de traza (slices, eventos)
          • Contratos de entrada/salida de run()
        end note

        note right of queue_ts
          **✓ Implementado**
          • Cola de eventos
          • Orden por timestamp + prioridad de evento
        end note

        note right of engine_ts
          **⏳ Pendiente**
          • Bucle principal de simulación (run)
          • Manejo de reloj, despacho, E/S y costos
          • Construcción de la traza
        end note
      }

      package "scheduler" as SCHED {
        rectangle "scheduler.ts" as scheduler_ts
        rectangle "ready-queue.ts" as ready_queue_ts
        rectangle "fcfs.ts" as fcfs_ts
        rectangle "rr.ts" as rr_ts
        rectangle "spn.ts" as spn_ts
        rectangle "srtn.ts" as srtn_ts
        rectangle "priority.ts" as priority_ts
        
        scheduler_ts -[hidden]down-> ready_queue_ts
        ready_queue_ts -[hidden]down-> fcfs_ts
        fcfs_ts -[hidden]down-> rr_ts
        rr_ts -[hidden]down-> spn_ts
        spn_ts -[hidden]down-> srtn_ts
        srtn_ts -[hidden]down-> priority_ts

        note right of scheduler_ts
          **⏳ Pendiente**
          • Interfaz/contrato de planificadores (IScheduler)
          • Enum/Tipo de políticas soportadas
        end note

        note right of ready_queue_ts
          **⏳ Pendiente**
          • Implementaciones de colas de listos
          • FIFO y utilidades base (min-queue opcional)
        end note

        note right of fcfs_ts
          **⏳ Pendiente**
          • Planificador FCFS
          • Integración con cola FIFO
        end note

        note right of rr_ts
          **⏳ Pendiente**
          • Planificador Round Robin
          • Manejo de quantum y reencolado
        end note

        note right of spn_ts
          **⏳ Pendiente**
          • Planificador SPN (no expropiativo)
          • Selección por ráfaga más corta siguiente
        end note

        note right of srtn_ts
          **⏳ Pendiente**
          • Planificador SRTN (expropiativo)
          • Selección por menor tiempo restante
        end note

        note right of priority_ts
          **⏳ Pendiente**
          • Planificador por prioridades
          • (Opcional) Envejecimiento/ajuste de prioridad
        end note
      }

      package "io" as IO {
        rectangle "parser.ts" as parser_ts
        rectangle "export.ts" as export_ts
        
        parser_ts -[hidden]down-> export_ts

        note right of parser_ts
          **⏳ Pendiente**
          • Validación y normalización de entrada (JSON/CSV)
          • Conversión a estructuras de Proceso
        end note

        note right of export_ts
          **⏳ Pendiente**
          • Exportación de trazas/métricas (JSON/CSV)
          • Helpers para descarga/serialización
        end note
      }

      package "metrics" as METRICS {
        rectangle "metricas.ts" as metricas_ts
        note right of metricas_ts
          **⏳ Pendiente**
          • Cálculo de métricas por proceso y globales
          • TRp, TE, TRn, promedios y agregados
        end note
      }

      package "gantt" as GANTT {
        rectangle "schema.ts" as schema_ts
        rectangle "builder.ts" as builder_ts
        
        schema_ts -[hidden]down-> builder_ts

        note right of schema_ts
          **⏳ Pendiente**
          • Tipos para el modelo de Gantt de UI
          • Items, inicio/fin y normalizaciones
        end note

        note right of builder_ts
          **⏳ Pendiente**
          • Conversión de trace.slices a modelo de Gantt
          • Agrupación y orden cronológico para pintar
        end note
      }
    

    package "stores" as STORES {
      rectangle "simulacion.ts" as simulacion_store_ts
      note right of simulacion_store_ts
        **⏳ Pendiente**
        • Svelte stores para política seleccionada
        • Resultados (trace/fin) y costos en UI
      end note
    }

    package "test" as TEST {
      rectangle "test-paso1-modelo.ts" as test_paso1_ts
      rectangle "test-paso2-engine.ts" as test_paso2_ts
      
      test_paso1_ts -[hidden]down-> test_paso2_ts

      note right of test_paso1_ts
        **✓ Implementado**
        • Tests de aceptación del Paso 1
        • Validación de servicioTotal, transiciones
        • Verificación de costos y validaciones
      end note

      note right of test_paso2_ts
        **✓ Implementado**
        • Tests de aceptación del Paso 2
        • Validación de cola de eventos
        • Verificación de tipos del motor
      end note
    }
  }

  package "routes" as ROUTES {
    rectangle "+layout.svelte" as layout_svelte
    rectangle "+page.svelte" as main_page

    package "simulacion" as R_SIM {
      rectangle "+page.svelte" as simulacion_page
    }
    
    package "resultados" as R_RES {
      rectangle "+page.svelte" as resultados_page
    }
    
    layout_svelte -[hidden]down-> main_page
    main_page -[hidden]down-> R_SIM
    R_SIM -[hidden]down-> R_RES

    note right of layout_svelte
      **⏳ Pendiente**
      • Layout general, estilos, navigation shell
    end note

    note right of main_page
      **⏳ Pendiente**
      • Página principal del simulador
      • Landing page y navegación
    end note

    note right of simulacion_page
      **⏳ Pendiente**
      • Pantalla para cargar tanda y ejecutar simulación
      • UI de selección de política y parámetros
      • Vista de métricas y Gantt básicos
    end note

    note right of resultados_page
      **⏳ Pendiente**
      • Visualización de resultados finales
      • Botones de exportación (JSON/CSV)
    end note
  }

  rectangle "app.d.ts" as app_dts
  note right of app_dts
    **⏳ Pendiente**
    • Tipos globales para SvelteKit/ambient
    • Extensiones de App namespace (si las hay)
  end note
}

MODEL -[hidden]down-> ENGINE
ENGINE -[hidden]down-> SCHED
SCHED -[hidden]down-> IO
IO -[hidden]down-> METRICS
METRICS -[hidden]down-> GANTT
GANTT -[hidden]down-> STORES
STORES -[hidden]down-> TEST
TEST -[hidden]down-> ROUTES

' Motor y tipos
engine_ts --> engine_types_ts : usa tipos
engine_ts --> queue_ts : utiliza cola
engine_ts --> scheduler_ts : orquesta
engine_ts --> proceso_ts : lee modelo
engine_ts --> costos_ts : aplica TIP/TCP/TFP

' Planificadores y cola
fcfs_ts --> ready_queue_ts
rr_ts --> ready_queue_ts
spn_ts --> ready_queue_ts
srtn_ts --> ready_queue_ts
priority_ts --> ready_queue_ts

' Gantt y esquemas
builder_ts --> schema_ts

' UI y lógica
simulacion_page --> simulacion_store_ts
simulacion_page --> engine_ts
simulacion_page --> builder_ts
simulacion_page --> metricas_ts
resultados_page --> export_ts

' Parser y modelo
parser_ts --> proceso_ts

' ----------------------------------------------------------
legend bottom
**Convenciones del Diagrama**
• Cada rectángulo = archivo físico
• Las notas indican "qué contiene" y estado actual
• Las flechas muestran dependencias principales (informativas)

**Estados de implementación:**
• **✓ Implementado** - Código completo y testeado
• **⏳ Pendiente** - Archivos creados, pendiente implementación

**Colores por Módulo:**
• **model** - Tipos y entidades base
• **engine** - Motor de simulación  
• **scheduler** - Algoritmos de planificación
• **io** - Entrada/salida de datos
• **metrics** - Cálculo de métricas
• **gantt** - Generación de diagramas
• **stores** - Estado de aplicación
• **routes** - Páginas de la aplicación
• **test** - Tests de aceptación
endlegend

@enduml
