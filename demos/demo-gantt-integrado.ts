/**
 * Demimport { MotorSimulacion } from '../src/lib/core/engine.js';
import { exportarGanttParaVisualizacion } from '../src/lib/infrastructure/io/ganttBuilder.js';
import type { Workload } from '../src/lib/model/types.js';ompleto: Simulaci√≥n con Construcci√≥n de Gantt Integrada
 * 
 * Este demo muestra la funcionalidad completa de:
 * - Simulaci√≥n por eventos discretos
 * - Registro y exportaci√≥n de eventos
 * - Construcci√≥n autom√°tica de diagrama de Gantt sin solapes
 * - Validaci√≥n de la l√≠nea temporal
 */

import { MotorSimulacion } from '../src/lib/core/engine.js';
import { exportarGanttParaVisualizacion } from '../src/lib/infrastructure/io/ganttBuilder.js';
import type { Workload } from '../src/lib/model/types.js';

async function demoSimulacionConGantt() {
  console.log('üéØ DEMO: Simulaci√≥n con Construcci√≥n de Gantt');
  console.log('=============================================');
  console.log('Simulaci√≥n completa + Eventos + Gantt sin solapes\n');

  // ========================================
  // 1. CONFIGURACI√ìN DEL WORKLOAD
  // ========================================
  console.log('üìã 1. CONFIGURACI√ìN DEL WORKLOAD');
  console.log('---------------------------------');

  const workload: Workload = {
    config: { 
      policy: 'RR',
      quantum: 2,      // Quantum corto para m√°s cambios de contexto
      tip: 1,          
      tfp: 1,          
      tcp: 1           
    },
    processes: [
      { 
        name: 'Editor', 
        tiempoArribo: 0, 
        rafagasCPU: 2,           
        duracionRafagaCPU: 3, 
        duracionRafagaES: 2, 
        prioridad: 1 
      },
      { 
        name: 'Navegador', 
        tiempoArribo: 1, 
        rafagasCPU: 3,           
        duracionRafagaCPU: 2, 
        duracionRafagaES: 1, 
        prioridad: 2 
      },
      { 
        name: 'Sistema', 
        tiempoArribo: 3, 
        rafagasCPU: 1,           
        duracionRafagaCPU: 4, 
        duracionRafagaES: 1, 
        prioridad: 3 
      }
    ]
  };

  console.log(`Algoritmo: ${workload.config.policy} (Quantum: ${workload.config.quantum})`);
  console.log(`Procesos: ${workload.processes.length}`);
  
  workload.processes.forEach((proc, i) => {
    console.log(`  ${i+1}. ${proc.name}: Arribo=${proc.tiempoArribo}, CPU=${proc.rafagasCPU}x${proc.duracionRafagaCPU}, E/S=${proc.duracionRafagaES}`);
  });

  // ========================================
  // 2. EJECUCI√ìN INTEGRADA
  // ========================================
  console.log('\n‚öôÔ∏è  2. EJECUCI√ìN CON CONSTRUCCI√ìN DE GANTT');
  console.log('------------------------------------------');

  const motor = new MotorSimulacion(workload);
  console.log('üöÄ Ejecutando simulaci√≥n con construcci√≥n autom√°tica de Gantt...');
  
  const inicioTiempo = Date.now();
  const { resultado, archivos, gantt } = await motor.ejecutarYExportar('demo-gantt', './');
  const finTiempo = Date.now();

  console.log(`‚úÖ Simulaci√≥n completada en ${finTiempo - inicioTiempo}ms`);
  console.log(`üìä Estado: ${resultado.exitoso ? 'EXITOSO' : 'ERROR'}`);

  // ========================================
  // 3. AN√ÅLISIS DEL GANTT GENERADO
  // ========================================
  console.log('\nüìä 3. AN√ÅLISIS DEL GANTT GENERADO');
  console.log('---------------------------------');

  console.log(`‚úÖ Segmentos del Gantt: ${gantt.segmentos.length}`);
  console.log(`‚úÖ Tiempo total: ${gantt.tiempoTotal} unidades`);
  console.log(`‚úÖ Procesos involucrados: ${gantt.procesos.length} (${gantt.procesos.join(', ')})`);
  
  // Validaci√≥n de solapes
  console.log(`\nüîç Validaci√≥n temporal:`);
  console.log(`  Sin solapes: ${gantt.validacion.sinSolapes ? '‚úÖ' : '‚ùå'}`);
  console.log(`  Errores: ${gantt.validacion.errores.length}`);
  console.log(`  Advertencias: ${gantt.validacion.advertencias.length}`);
  
  if (gantt.validacion.errores.length > 0) {
    console.log(`\n‚ùå Errores detectados:`);
    gantt.validacion.errores.forEach((error: string) => console.log(`  ‚Ä¢ ${error}`));
  }
  
  if (gantt.validacion.advertencias.length > 0) {
    console.log(`\n‚ö†Ô∏è Advertencias:`);
    gantt.validacion.advertencias.forEach((advertencia: string) => console.log(`  ‚Ä¢ ${advertencia}`));
  }

  // ========================================
  // 4. CRONOGRAMA DETALLADO
  // ========================================
  console.log('\nüìà 4. CRONOGRAMA DETALLADO');
  console.log('--------------------------');

  console.log('L√≠nea temporal completa (sin solapes):');
  gantt.segmentos.forEach((segmento: any, i: number) => {
    const duracion = segmento.tEnd - segmento.tStart;
    const tipoIcono = {
      'CPU': 'üî•',
      'ES': 'üíæ',
      'TIP': 'üîß',
      'TFP': 'üèÅ',
      'TCP': 'üîÑ',
      'OCIOSO': 'üò¥'
    }[segmento.kind] || '‚ùì';
    
    console.log(`  ${i+1}. T${segmento.tStart}-${segmento.tEnd}: ${tipoIcono} ${segmento.process} (${segmento.kind}) - ${duracion}u`);
  });

  // ========================================
  // 5. ESTAD√çSTICAS DE RENDIMIENTO
  // ========================================
  console.log('\nüìä 5. ESTAD√çSTICAS DE RENDIMIENTO');
  console.log('----------------------------------');

  console.log(`üî• Utilizaci√≥n de CPU: ${gantt.estadisticas.utilizacionCPU.toFixed(1)}%`);
  console.log(`üò¥ Tiempo ocioso: ${gantt.estadisticas.tiempoOcioso} unidades`);
  console.log(`üîß Tiempo del SO: ${gantt.estadisticas.tiempoSO} unidades`);

  console.log(`\nüìã Distribuci√≥n temporal:`);
  Object.entries(gantt.estadisticas.distribucionTiempos)
    .sort(([,a], [,b]) => (b as number) - (a as number))
    .forEach(([tipo, tiempo]) => {
      const porcentaje = (((tiempo as number) / gantt.tiempoTotal) * 100).toFixed(1);
      const icono = {
        'CPU': 'üî•',
        'ES': 'üíæ',
        'TIP': 'üîß',
        'OCIOSO': 'üò¥'
      }[tipo] || 'üìä';
      console.log(`  ${icono} ${tipo}: ${tiempo} unidades (${porcentaje}%)`);
    });

  // ========================================
  // 6. EXPORTACI√ìN PARA VISUALIZACI√ìN
  // ========================================
  console.log('\nüé® 6. EXPORTACI√ìN PARA VISUALIZACI√ìN');
  console.log('-------------------------------------');

  const exportacionUI = exportarGanttParaVisualizacion(gantt);
  
  console.log(`‚úÖ Datos para visualizaci√≥n preparados`);
  console.log(`üìä Segmentos para UI: ${exportacionUI.segmentos.length}`);
  console.log(`üîß Metadata completa: tiempo total, procesos, estad√≠sticas`);

  console.log(`\nüìä Formato para interfaz gr√°fica:`);
  exportacionUI.segmentos.slice(0, 5).forEach((seg, i) => {
    console.log(`  ${i+1}. ${seg.proceso} (${seg.tipo}): ${seg.tiempoInicio}‚Üí${seg.tiempoFin} (${seg.duracion}u)`);
  });
  
  if (exportacionUI.segmentos.length > 5) {
    console.log(`  ... y ${exportacionUI.segmentos.length - 5} segmentos m√°s`);
  }

  // ========================================
  // 7. AN√ÅLISIS DE CONCURRENCIA
  // ========================================
  console.log('\nüîÑ 7. AN√ÅLISIS DE CONCURRENCIA');
  console.log('------------------------------');

  // Verificar superposiciones de E/S y CPU
  const segmentosCPU = gantt.segmentos.filter((s: any) => s.kind === 'CPU');
  const segmentosES = gantt.segmentos.filter((s: any) => s.kind === 'ES');

  console.log(`üî• Per√≠odos de CPU: ${segmentosCPU.length}`);
  console.log(`üíæ Per√≠odos de E/S: ${segmentosES.length}`);

  // Verificar si hay concurrencia real (E/S mientras otros procesos usan CPU)
  let concurrenciaDetectada = false;
  for (const segES of segmentosES) {
    for (const segCPU of segmentosCPU) {
      // Verificar si hay overlap temporal (E/S concurrente con CPU)
      if (segES.process !== segCPU.process && 
          segES.tStart < segCPU.tEnd && segCPU.tStart < segES.tEnd) {
        concurrenciaDetectada = true;
        break;
      }
    }
    if (concurrenciaDetectada) break;
  }

  console.log(`üîÄ Concurrencia E/S-CPU: ${concurrenciaDetectada ? '‚úÖ Detectada' : '‚ùå No detectada'}`);

  // ========================================
  // 8. ARCHIVOS GENERADOS
  // ========================================
  console.log('\nüíæ 8. ARCHIVOS GENERADOS');
  console.log('------------------------');

  console.log('Archivos de eventos generados:');
  console.log(`  üìÑ JSON: ${archivos.archivoJSON}`);
  console.log(`  üìä CSV: ${archivos.archivoCSV}`);
  console.log('\nArchivos listos para:');
  console.log('  üìà An√°lisis estad√≠stico en herramientas externas');
  console.log('  üé® Visualizaci√≥n personalizada del Gantt');
  console.log('  üîç Auditor√≠a detallada del planificador');
  console.log('  üìö Documentaci√≥n y reportes acad√©micos');

  // ========================================
  // RESUMEN FINAL
  // ========================================
  console.log('\nüéâ RESUMEN FINAL');
  console.log('================');
  console.log('‚úÖ Simulaci√≥n por eventos discretos: COMPLETADA');
  console.log('‚úÖ Registro y exportaci√≥n de eventos: EXITOSA');
  console.log('‚úÖ Construcci√≥n de Gantt sin solapes: IMPLEMENTADA');
  console.log('‚úÖ Validaci√≥n temporal: PASADA');
  console.log('‚úÖ Estad√≠sticas de rendimiento: CALCULADAS');
  console.log('‚úÖ Exportaci√≥n para visualizaci√≥n: LISTA');

  console.log(`\nüéØ Resultado: Diagrama de Gantt de ${gantt.segmentos.length} segmentos`);
  console.log(`             con ${gantt.estadisticas.utilizacionCPU.toFixed(1)}% de utilizaci√≥n de CPU`);
  console.log(`             en ${gantt.tiempoTotal} unidades de tiempo`);
  
  console.log('\nüöÄ ¬°Demo completo exitoso! Sistema listo para producci√≥n.');
}

// Ejecutar demo
console.log('üöÄ Iniciando demo de simulaci√≥n con Gantt integrado...\n');

demoSimulacionConGantt()
  .catch(error => {
    console.error('‚ùå Error en el demo:', error);
  });
