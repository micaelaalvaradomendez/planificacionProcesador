@startuml Componentes_Simulador_Integrador_v2

title "Simulador de PlanificaciÃ³n - Componentes (Alineado a Consigna del Integrador)"

!define PRESENTATION_COLOR #E8F4FD
!define APPLICATION_COLOR #E8F8F5  
!define DOMAIN_COLOR #FDF2E9
!define INFRASTRUCTURE_COLOR #F3E5F5

' ===============================
' CAPA DE PRESENTACIÃ“N (SvelteKit + UI) - Solo DTOs
' ===============================
package "PRESENTACIÃ“N (SvelteKit + UI)" <<PRESENTATION_COLOR>> {
  
  package "SvelteKit Routes" {
    component [+page.svelte\n(Carga y ConfiguraciÃ³n)] as HomePage
    component [resultados/+page.svelte\n(VisualizaciÃ³n Resultados)] as ResultsPage
    component [+layout.svelte\n(Layout Principal)] as Layout
  }
  
  package "UI Components - Entrada de Datos" {
    component [CargaArchivo.svelte\nFormatos: TXT, JSON, CSV] as CargaArchivo
    component [TablaProcesos.svelte\nProceso: ID,Arribo,RÃ¡faga,Prioridad] as TablaProcesos
    component [ConfiguracionPanel.svelte\nPolÃ­tica+TIP+TCP+TFP+Quantum] as ConfigPanel
  }
  
  package "UI Components - VisualizaciÃ³n Resultados" {
    component [GanttFixed.svelte\nDiagrama Temporal (colores TIP/CPU/ES/TFP/IDLE)] as GanttVisualizacion
    component [IndicadoresProceso.svelte\nTR,TRn,Tiempo Listo] as MetricasProceso
    component [IndicadoresTanda.svelte\nTRt,Throughput,UtilizaciÃ³n] as MetricasTanda
    component [EventosSimulacion.svelte\nLog CronolÃ³gico con Filtros] as EventosLog
    component [PanelExportacion.svelte\nExportar JSON,CSV,SVG] as PanelExport
  }
  
  package "UI Composables" {
    component [useSimulationUI.ts\nGestiÃ³n Estado Reactivo] as UseSimUI
    component [useFileDownload.ts\nDescarga de Archivos] as UseDownload
  }
}

' ===============================
' CAPA DE APLICACIÃ“N (Casos de Uso - Solo Mappers)  
' ===============================
package "APLICACIÃ“N (Casos de Uso)" <<APPLICATION_COLOR>> {
  
  package "Casos de Uso Principales" {
    component [RunSimulation.ts\nCaso de uso principal] as UC_RunSimulation
    note top of UC_RunSimulation
    **Orquestador Principal (NO recalcula):**
    1. Procesar workload con parsers
    2. Configurar motor Ãºnico del dominio
    3. Ejecutar simulaciÃ³n por eventos discretos  
    4. Devolver ResultDTO con {events, processes, totals}
    end note
    
    component [BuildGantt.ts\nMapper: eventosâ†’gantt DTO] as UC_BuildGantt
    component [ComputeMetrics.ts\nMapper: eventos/totalsâ†’metrics DTO] as UC_ComputeMetrics
    component [ExportResults.ts\nOrquestador de exportaciÃ³n] as UC_ExportResults
  }
  
  package "DTOs y Contratos" {
    component [dto.ts\nWorkloadDTO, ConfigDTO,\nGanttDTO, MetricsDTO,\nResultDTO, EventDTO] as APP_DTO
    note right of APP_DTO
    **DTOs como contratos:**
    â€¢ WorkloadDTO: entrada parsers
    â€¢ ConfigDTO: parÃ¡metros SO
    â€¢ EventDTO: log de eventos
    â€¢ GanttDTO: timeline visual
    â€¢ MetricsDTO: TR, TRn, utilizaciÃ³n
    â€¢ ResultDTO: salida completa
    end note
  }
}

' ===============================
' CAPA DE DOMINIO (Motor Ãšnico por Eventos Discretos)
' ===============================  
package "DOMINIO (Motor por Eventos Discretos)" <<DOMAIN_COLOR>> {
  
  package "Motor de SimulaciÃ³n Ãšnico" {
    component [Simulation.ts\nAggr. raÃ­z: Motor Ãºnico] as DM_Simulation
    note top of DM_Simulation
    **Motor Principal del Integrador (ÃšNICO):**
    â€¢ SimulaciÃ³n por eventos discretos (t=0 â†’ t_fin)
    â€¢ Estados canÃ³nicos: NUEVOâ†’LISTOâ†’CORRIENDOâ†’BLOQUEADOâ†’TERMINADO  
    â€¢ Cobra TIP: Nâ†’L (admisiÃ³n)
    â€¢ Cobra TCP: Lâ†’C (dispatch) y Câ†’L (expropiaciÃ³n)
    â€¢ Cobra TFP: Câ†’T (finalizaciÃ³n)
    â€¢ Event Log = fuente Ãºnica de verdad
    end note
    
    component [EventQueue.ts\nCola estable (time,prio,seq)] as DM_EventQueue
    component [Cpu.ts\ndispatch, preempt, TCP] as DM_Cpu
    component [ReadyQueue.ts\nFCFS/SJF/SRTF/Priority/RR] as DM_ReadyQueue
    component [Scheduler.ts\npick, shouldPreempt, onDispatch?] as DM_Scheduler
  }
  
  package "Entidades del Dominio" {
    component [Process.ts\n5 estados canÃ³nicos, transiciones] as DM_Process
    note right of DM_Process
    **Estados segÃºn Integrador:**
    â€¢ NUEVO: proceso arribÃ³ al sistema
    â€¢ LISTO: en Ready Queue, disponible
    â€¢ CORRIENDO: ejecutando en CPU
    â€¢ BLOQUEADO: operaciÃ³n I/O
    â€¢ TERMINADO: proceso finalizado
    **Transiciones vÃ¡lidas Ãºnicamente**
    end note
  }
  
  package "Eventos del Sistema" {
    component [Events.ts\nArribo, FinTIP, Dispatch,\nFinRafaga, FinES, FinTFP,\nQuantumExpires + orden 1â€“6] as DM_Events
    
    note right of DM_Events
    **7 Eventos + Orden de Desempate:**
    1. Arribo proceso al sistema
    2. Fin TIP (NUEVOâ†’LISTO)
    3. Dispatch (LISTOâ†’CORRIENDO)
    4. Fin rÃ¡faga CPU
    5. Fin E/S (BLOQUEADOâ†’LISTO)
    6. Fin TFP (proceso termina)
    7. ExpiraciÃ³n quantum (RR)
    
    **Orden eventos simultÃ¡neos:**
    **1) Câ†’T**, **2) Câ†’B**, **3) Câ†’L**,
    **4) Bâ†’L**, **5) Nâ†’L**, **6) Lâ†’C**
    end note
  }
  
  package "PolÃ­ticas de PlanificaciÃ³n" {
    component [Policies/*\nFCFS,SJF,SRTF,RR,Priority] as DM_Policies
    
    note bottom of DM_Policies
    **Comportamientos EspecÃ­ficos:**
    â€¢ **FCFS/SJF:** No expropiativos
    â€¢ **RR:** onDispatch programa QuantumExpires(t+q)
    â€¢ **SRTF/Priority:** Empates NO expropian (mantener actual)
    â€¢ **Priority:** Aging solo en READY
    â€¢ **SJF:** Por prÃ³xima rÃ¡faga CPU
    â€¢ **SRTF:** Por resto de rÃ¡faga actual
    end note
  }
}

' ===============================
' CAPA DE INFRAESTRUCTURA (Adapters - Solo DTOs)
' ===============================
package "INFRAESTRUCTURA (Adapters)" <<INFRASTRUCTURE_COLOR>> {
  
  package "Parsers de Entrada - Consigna" {
    component [ParserTXT.ts\nFormato Especificado â†’ WorkloadDTO] as INF_ParserTXT
    note top of INF_ParserTXT
    **Formato TXT segÃºn Consigna:**
    "ID,TiempoArribo,TiempoRafaga,Prioridad"
    P1,0,8,3
    P2,1,4,1  
    P3,2,9,2
    **Output:** WorkloadDTO Ãºnicamente
    end note
    
    component [ParserJSON.ts\nâ†’ WorkloadDTO] as INF_ParserJSON
    component [ParserCSV.ts\nâ†’ WorkloadDTO] as INF_ParserCSV
  }
  
  package "Exportadores - Salidas Integrador" {
    component [ExportadorEventos.ts\nEventDTO[] â†’ JSON/CSV] as INF_ExportadorEventos
    component [ExportadorGantt.ts\nGanttDTO â†’ JSON/SVG/ASCII] as INF_ExportadorGantt  
    component [ExportadorMetricas.ts\nMetricsDTO â†’ JSON/CSV] as INF_ExportadorMetricas
    
    note bottom of INF_ExportadorGantt
    **Salidas Gantt Integrador:**
    â€¢ JSON con tramos temporales
    â€¢ SVG para visualizaciÃ³n  
    â€¢ ASCII para consola
    â€¢ **Input:** GanttDTO del mapper
    end note
  }
  
  package "Validadores de Integridad" {
    component [ValidadorIntegridad.ts\nOverlaps, secuencias, continuidad] as INF_ValidadorIntegridad
    
    note right of INF_ValidadorIntegridad
    **Validaciones crÃ­ticas:**
    â€¢ Gantt sin overlaps temporales
    â€¢ Secuencia de estados vÃ¡lida
    â€¢ Continuidad temporal eventos
    â€¢ ConservaciÃ³n tiempo: user+os+idle=makespan
    end note
  }
}

' ===============================
' RELACIONES PRINCIPALES
' ===============================

' UI â†’ Application (Solo DTOs)
HomePage --> UC_RunSimulation : WorkloadDTO + ConfigDTO
ResultsPage --> UC_BuildGantt : ResultDTO  
CargaArchivo --> UC_RunSimulation : archivos entrada
ConfigPanel --> UC_RunSimulation : parÃ¡metros SO
GanttVisualizacion --> UC_BuildGantt : GanttDTO
EventosLog --> UC_RunSimulation : EventDTO[]
MetricasProceso --> UC_ComputeMetrics : MetricsDTO
MetricasTanda --> UC_ComputeMetrics : MetricsDTO
PanelExport --> UC_ExportResults : ResultDTO
UseSimUI --> APP_DTO : manejo DTOs

' Application â†’ Domain (Ãšnico motor)
UC_RunSimulation --> DM_Simulation : ejecuta simulaciÃ³n Ãºnica
UC_BuildGantt --> APP_DTO : mapper eventosâ†’gantt
UC_ComputeMetrics --> APP_DTO : mapper eventos/totalsâ†’metrics
UC_ExportResults --> APP_DTO : orquesta DTOs

' Domain - Motor Ãšnico
DM_Simulation --> DM_EventQueue : programa eventos ordenados
DM_Simulation --> DM_Cpu : dispatch, preempt, TCP
DM_Simulation --> DM_ReadyQueue : gestiÃ³n cola listos
DM_Simulation --> DM_Scheduler : selecciÃ³n y expropiaciÃ³n
DM_Simulation --> DM_Process : transiciones estados
DM_Simulation --> DM_Events : manejo 7 eventos + orden
DM_Scheduler --> DM_Policies : algoritmos especÃ­ficos

' Application â†’ Infrastructure (Solo DTOs)
UC_RunSimulation --> INF_ParserTXT : WorkloadDTO
UC_RunSimulation --> INF_ParserJSON : WorkloadDTO
UC_RunSimulation --> INF_ParserCSV : WorkloadDTO
UC_ExportResults --> INF_ExportadorEventos : EventDTO[] â†’ JSON/CSV
UC_BuildGantt --> INF_ExportadorGantt : GanttDTO â†’ formatos
UC_ComputeMetrics --> INF_ExportadorMetricas : MetricsDTO â†’ archivos
UC_BuildGantt --> INF_ValidadorIntegridad : validaciÃ³n overlaps
UC_ComputeMetrics --> INF_ValidadorIntegridad : validaciÃ³n consistencia

' ===============================
' NOTAS ARQUITECTÃ“NICAS CORREGIDAS
' ===============================

note top of DM_Simulation
**ðŸŽ¯ PRINCIPIOS ARQUITECTÃ“NICOS CORREGIDOS**

**Motor Ãšnico de Eventos Discretos:**
  Event Log = Ãºnica fuente de verdad (Gantt y mÃ©tricas leen de ahÃ­)
  Application SOLO orquesta/mappea DTOs (no recalcula SO)
  Domain cobra TIP/TCP/TFP en los puntos correctos
  RR programa QuantumExpires al DISPATCH
  SJF/SRTF: clave por prÃ³xima rÃ¡faga / resto de rÃ¡faga actual
  Priority: mayor prioridad expropia, empates mantener; aging solo en READY
  Orden eventos simultÃ¡neos: 1) Câ†’T, 2) Câ†’B, 3) Câ†’L, 4) Bâ†’L, 5) Nâ†’L, 6) Lâ†’C

**Overheads SO (solo en dominio):**
â€¢ TIP: Nâ†’L (admisiÃ³n al sistema)
â€¢ TCP: Lâ†’C (dispatch) y Câ†’L (expropiaciÃ³n)  
â€¢ TFP: Câ†’T (finalizaciÃ³n proceso)
end note

note bottom of INF_ParserTXT
**ðŸ“‹ CONTRATOS DTO - NO CLASES DOMINIO**

**Parsers â†’ WorkloadDTO:**
```typescript
interface WorkloadDTO {
  processes: ProcessInputDTO[];
}

interface ProcessInputDTO {
  id: string;
  arrivalTime: number;
  burstTime: number;
  priority: number;
}
```

**Mappers â†’ EventDTO/GanttDTO/MetricsDTO:**
â€¢ EventDTO: timestamp, type, processId, metadata
â€¢ GanttDTO: timeline con tramos TIP/CPU/ES/TFP/IDLE
â€¢ MetricsDTO: TR, TRn, tiempo listo, utilizaciÃ³n
â€¢ ResultDTO: {events, gantt, metrics, totals}
end note

note right of INF_ExportadorGantt
**ðŸ“Š VALIDACIÃ“N DE INTEGRIDAD**

**ValidadorIntegridad chequea:**
â€¢ Gantt sin overlaps temporales
â€¢ ConservaciÃ³n tiempo: user+os+idle = makespan
â€¢ Secuencia estados vÃ¡lida por proceso
â€¢ Continuidad temporal en eventos
â€¢ Bâ†’L instantÃ¡neo (sin TCP)
â€¢ RR: Dispatch agenda QuantumExpires
â€¢ Empates timestamp siguen orden 1â€“6

**Salidas validadas:**
â€¢ JSON/CSV eventos cronolÃ³gicos
â€¢ SVG/ASCII Gantt coloreado
â€¢ MÃ©tricas derivadas del log Ãºnicamente
end note

note bottom
**ðŸ”§ PRINCIPIOS DE IMPLEMENTACIÃ“N:**
â€¢ **Dominio:** Motor Ãºnico, Event Log fuente verdad, TIP/TCP/TFP solo donde corresponde
â€¢ **Application:** Solo mappers, NO recalcula overheads SO, trabaja con DTOs
â€¢ **Infrastructure:** Adapters puros, validaciÃ³n integridad, sin lÃ³gica negocio  
â€¢ **UI:** Consume DTOs Ãºnicamente, colores por estado, filtros eventos
â€¢ **Tests mÃ­nimos:** ConservaciÃ³n tiempo, RR programa quantum, empates orden 1â€“6, Bâ†’L sin TCP
end note

@enduml
