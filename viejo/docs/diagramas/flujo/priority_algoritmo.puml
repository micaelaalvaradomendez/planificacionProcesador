@startuml Priority_Algoritmo_Actualizado
title "Algoritmo Priority - Implementación Real del Sistema"

start

:elegirSiguiente() llamado por Motor;

if (colaListos.length === 0?) then (SÍ)
  :return undefined;
  stop
endif

' Aplicar Aging si habilitado
if (habilitarAging?) then (SÍ)
  :aplicarAging(colaListos, tiempoActual);
  note right
  **Anti-Starvation Aging:**
  • Solo procesos en estado LISTO
  • Incremento cada intervaloAging
  • prioridadActual -= incrementoAging
  • Tracking por proceso individual
  end note
endif

:Buscar proceso con mayor prioridad;
note right
**Convención Académica:**
Menor número = Mayor prioridad
prioridad 1 > prioridad 2 > ... > prioridad N
end note

partition "**Algoritmo de Selección**" {
  :mejor = primer proceso de cola;
  repeat
    :actual = siguiente proceso;
    :prioridadMejor = obtenerPrioridadEfectiva(mejor);
    :prioridadActual = obtenerPrioridadEfectiva(actual);
    
    if (prioridadActual < prioridadMejor?) then (SÍ)
      :mejor = actual;
    elseif (prioridadActual == prioridadMejor?) then (EMPATE)
      :usar compararPorTiempoLlegadaReady();
      note right: Desempate por orden llegada a READY
      if (actual llega antes?) then (SÍ)
        :mejor = actual;
      endif
    endif
  repeat while (hay más procesos?)
}

:return mejor;

' Evaluación de Expropiación
if (soportaExpropiación?) then (SÍ)
  partition "**Evaluación de Expropiación**" {
    :debeExpropiar(procesoActual, procesoCandidato);
    note right
    **Regla CRÍTICA:**
    Expropia SOLO si:
    prioridadCandidato < prioridadActual
    
    En empates: mantener proceso actual
    end note
    
    if (candidato.prioridad < actual.prioridad?) then (SÍ)
      :return true - EXPROPIAR;
    else (NO)
      :return false - MANTENER;
    endif
  }
else (NO)
  :No expropiativo - mantener actual;
endif

stop

note top of start
**ESTRATEGIA PRIORITY - CARACTERÍSTICAS**

**Propiedades de la Clase:**
• nombre: configurable (Expropiativo/No expropiativo)
• soportaExpropiación: configurable (constructor)
• requiereQuantum = false

**Configuración Aging:**
• habilitarAging: opcional anti-starvation
• incrementoAging: reducción prioridad (default: 1)
• intervaloAging: frecuencia aging (default: 10)
• agingPorProceso: Map tracking individual

**Métodos Clave:**
• elegirSiguiente(): busca mayor prioridad + aging
• debeExpropiar(): compara prioridades estrictamente
• aplicarAging(): previene starvation
• obtenerPrioridadEfectiva(): con/sin aging
end note

note bottom of stop
**ALGORITMO PRIORITY - IMPLEMENTACIÓN REAL**

**Filosofía:** "Priority First - Anti Starvation"
• Mayor prioridad = menor número (1 > 2 > 3...)
• Expropiación opcional por prioridad
• Aging solo mientras proceso está LISTO

**Criterio de Expropiación:**
SOLO si: prioridadCandidato < prioridadActual
• Comparación estricta (<, no <=)
• En empates: mantener proceso actual
• Evita cambios innecesarios

**Sistema de Aging (Opcional):**
• Solo para procesos en cola READY
• prioridadActual = prioridadOriginal - aging
• Tracking individual por proceso
• Previene inanición procesos baja prioridad

**Configuraciones Típicas:**
• **Priority No Expropiativo:** Para sistemas batch
• **Priority Expropiativo:** Para sistemas tiempo real
• **Priority + Aging:** Para fairness mejorada

**Ventajas:**
• Control granular importancia procesos
• Respuesta rápida procesos críticos
• Aging configurable contra starvation

**Desventajas:**
• Posible inanición sin aging
• Mayor complejidad configuración
• Overhead aging si está habilitado
end note

:proceso.estado = LISTO -> CORRIENDO;

:Aplicar TCP;

:procesoActualCPU = proceso;

:Programar FIN_RAFAGA_CPU;

stop

note right
Priority Scheduling:
- Mayor valor numerico = mayor prioridad
- Expropiacion inmediata si nueva prio > actual
- En empate: mantener proceso actual
- TCP en despacho L->C y expropiaciones
- Riesgo starvation procesos baja prioridad
end note


@enduml
