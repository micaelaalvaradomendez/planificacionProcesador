@startuml FCFS_Algoritmo_Actualizado
title "Algoritmo FCFS - Implementación Real del Sistema"

start

:elegirSiguiente() llamado por Motor;
note right
**Contexto de Activación:**
• Motor necesita seleccionar próximo proceso
• CPU libre con cola READY no vacía
• Después de finalizar ráfaga o I/O
end note

if (colaListos.length === 0?) then (SÍ)
  :return undefined;
  note right: **Sin procesos disponibles**\nMotor mantendrá CPU idle
  stop
endif

:return colaListos[0];
note right
**FCFS Puro - FIFO Estricto:**
• Primer proceso en cola READY
• NO reordena por ningún criterio
• NO considera tiempo de arribo
• NO considera ráfaga restante
• Orden FIFO de inserción a READY
end note

stop

note left of start
**ESTRATEGIA FCFS - CARACTERÍSTICAS**

**Propiedades de la Clase:**
• nombre = 'FCFS'
• soportaExpropiacion = false
• requiereQuantum = false

**Método ordenarColaListos():**
• NO reordena la cola READY
• Mantiene orden FIFO de inserción
• Comentario: "FCFS no reordena"

**Método reiniciar():**
• FCFS no mantiene estado interno
• No hay acciones de reinicio
end note

note bottom of stop
**ALGORITMO FCFS - IMPLEMENTACIÓN REAL**

**Filosofía:** "First Come, First Served"
• FIFO estricto de la cola READY
• NO reordena por tiempo de arribo original
• Proceso post-I/O va al FINAL de cola

**Ventajas:**
• Máxima simplicidad
• Sin overhead de cálculo
• Determinístico y predecible
• Sin starvation por diseño

**Desventajas:**
• Efecto convoy (procesos largos)
• Tiempo respuesta variable
• No considera características de procesos

**Casos de Uso Ideales:**
• Sistemas batch processing
• Workloads homogéneos
• Entornos predecibles

**Integración con Motor:**
• El motor maneja despacho y TCP
• El algoritmo solo selecciona proceso
• Estado gestionado por motor principal
end note

@enduml