@startuml DiagramaArchivos_Unificado
title "Arquitectura del Sistema - Simulador de Planificación de Procesos"

!define ROUTE_COLOR #E8F4FD
!define APP_COLOR #E8F8F5
!define DOMAIN_COLOR #FDF2E9
!define CORE_COLOR #FADBD8
!define INFRA_COLOR #F3E5F5
!define UI_COLOR #EBF5FB

package "src/" as src {
  [app.d.ts] as AppDts #EAEAEA
  [app.html] as AppHtml #EAEAEA
  
  package "routes/" as routes <<ROUTE_COLOR>> {
    [+layout.svelte] as LayoutSvelte
    [+layout.ts] as LayoutTs  
    [+page.svelte] as PageHome
    [style.css] as StyleCss
    
    package "resultados/" {
      [+page.svelte] as PageResultados
    }
  }
  
  package "lib/" as lib {
    
    package "application/" as application <<APP_COLOR>> {
      [simuladorLogic.ts] as SimLogic
      [simulation.ts] as SimStore
      
      package "usecases/" {
        [runSimulation.ts] as RunSim
        [buildGantt.ts] as BuildGantt
        [computeStatistics.ts] as ComputeStats
        [simulationRunner.ts] as SimRunner
        [simulationState.ts] as SimState
      }
      
      package "composables/" {
        [useSimulationUI.ts] as UseSimUI
        [useFileDownload.ts] as UseDownload
      }
    }
    
    package "domain/" as domain <<DOMAIN_COLOR>> {
      [types.ts] as DomainTypes
      [validators.ts] as Validators
      [utils.ts] as DomainUtils
      
      package "entities/" {
        [Simulador.ts] as SimuladorEntity
        [Proceso.ts] as ProcesoEntity
      }
      
      package "algorithms/" {
        [Scheduler.ts] as SchedulerBase
        [fcfs.ts] as FCFS
        [rr.ts] as RR
        [priority.ts] as Priority
        [sjf.ts] as SJF
        [srtf.ts] as SRTF
      }
      
      package "services/" {
        [GanttBuilder.ts] as GanttBuilder
        [MetricsCalculator.ts] as MetricsCalc
        [index.ts] as ServicesIndex
      }
      
      package "events/" {
        [gantt.types.ts] as GanttTypes
        [gantt.ts] as GanttEvents
      }
    }
    
    package "core/" as core <<CORE_COLOR>> {
      [index.ts] as CoreIndex
      [state.ts] as CoreState
      [eventQueue.ts] as EventQueue
      [priorityQueue.ts] as PriorityQueue
      [adaptadorSimuladorDominio.ts] as AdaptadorSim
      [adaptadorEntidadesDominio.ts] as AdaptadorEnt
      [workloadAdapter.ts] as WorkloadAdapter
      [registroEventos.ts] as RegistroEventos
      [events.ts] as CoreEvents
    }
    
    package "infrastructure/" as infrastructure <<INFRA_COLOR>> {
      
      package "parsers/" {
        [workloadParser.ts] as WorkloadParser
        [jsonParser.ts] as JsonParser
        [txtParser.ts] as TxtParser
        [csvParser.ts] as CsvParser
        [ParseError.ts] as ParseError
      }
      
      package "io/" {
        [fileDownloader.ts] as FileDownloader
        [exportEvents.ts] as ExportEvents
        [exportMetrics.ts] as ExportMetrics
        [ganttExporter.ts] as GanttExporter
        [csvUtils.ts] as CsvUtils
        [eventLogger.ts] as EventLogger
      }
    }
    
    package "ui/" as ui <<UI_COLOR>> {
      [types.ts] as UITypes
      
      package "components/" {
        [CargaArchivo.svelte] as CargaArchivo
        [TablaProcesos.svelte] as TablaProcesos
        [ConfiguracionPanel.svelte] as ConfigPanel
        [GanttFixed.svelte] as GanttComp
        [IndicadoresProceso.svelte] as IndicadoresProceso
        [IndicadoresTanda.svelte] as IndicadoresTanda
        [UtilizacionCPU.svelte] as UtilizacionCPU
        [TablaResumenComparativa.svelte] as TablaComparativa
        [PanelExportacion.svelte] as PanelExport
        [EventosSimulacion.svelte] as EventosComp
      }
      
      package "styles/" {
        [tokens.css] as TokensCSS
      }
    }
    
    package "assets/" {
      [favicon.svg] as Favicon
    }
  }
}

' === CONEXIONES DE PRESENTACIÓN (ROUTES) ===
note top of routes : **CAPA DE PRESENTACIÓN**\nSvelteKit Routing & Layout

PageHome .down.> CargaArchivo : **UI upload archivos**
PageHome .down.> TablaProcesos : **Visualiza procesos cargados**
PageHome .down.> ConfigPanel : **Configuración simulación**
PageHome .down.> SimLogic : **cargarArchivoProcesos()\nvalidarConfiguracion()\nejecutarSimulacion()\nguardarDatosSimulacion()**

PageResultados .down.> IndicadoresProceso : **Métricas por proceso**
PageResultados .down.> IndicadoresTanda : **Métricas globales tanda**
PageResultados .down.> UtilizacionCPU : **Gráficos utilización CPU**
PageResultados .down.> GanttComp : **Diagrama Gantt temporal**
PageResultados .down.> TablaComparativa : **Resumen comparativo**
PageResultados .down.> PanelExport : **Panel exportación archivos**
PageResultados .down.> EventosComp : **Lista eventos simulación**
PageResultados .down.> SimLogic : **cargarDatosSimulacion()**

LayoutSvelte .down.> Favicon : **import favicon**
LayoutSvelte .down.> TokensCSS : **import estilos globales**

' === CONEXIONES CAPA APLICACIÓN ===
note top of application : **CAPA DE APLICACIÓN**\nOrquestación y Casos de Uso

SimLogic .down.> WorkloadParser : **cargarArchivo() - parseo archivos**
SimLogic .down.> JsonParser : **parseJsonToWorkload() - archivos JSON**
SimLogic .down.> TxtParser : **parseTxtToWorkload() - archivos TXT**
SimLogic .down.> RunSim : **ejecutarSimulacionCore() - ejecución principal**
SimLogic .down.> GanttBuilder : **construcción diagramas Gantt**
SimLogic .down.> DomainTypes : **Policy, Workload, ProcessSpec, RunConfig, SimEvent, Metrics**

SimStore .down.> SimState : **getInitialSimulationState() - estado inicial**

RunSim .down.> DomainTypes : **Workload, SimEvent, Metrics, EventType**
RunSim .down.> Validators : **validarWorkloadParaSimulacion()**
RunSim .down.> MetricsCalc : **cálculo métricas**
RunSim .down.> AdaptadorSim : **orquestación simulación**
RunSim .down.> EventLogger : **convertirEventosInternos()**

BuildGantt .down.> DomainTypes : **SimEvent, RunConfig**
BuildGantt .down.> GanttBuilder : **servicio construcción Gantt**

ComputeStats .down.> DomainTypes : **Metrics, SimEvent**
ComputeStats .down.> MetricsCalc : **calculadora estadísticas**

SimRunner .down.> RunSim : **ejecutarSimulacionCompleta()**
SimRunner .down.> BuildGantt : **construirDiagramaGantt()**
SimRunner .down.> ComputeStats : **calcularEstadisticasExtendidas()**
SimRunner .down.> DomainTypes : **Workload, SimEvent, Metrics, GanttSlice**

UseSimUI .down.> SimState : **gestión estado UI**
UseSimUI .down.> WorkloadParser : **cargarArchivo() - parseo**
UseSimUI .down.> SimRunner : **runSimulationWithTimeout()**
UseSimUI .down.> BuildGantt : **construirDiagramaGantt()**

UseDownload .down.> FileDownloader : **descargarEventos(), descargarMetricas()**
UseDownload .down.> DomainTypes : **SimEvent, Metrics**

' === CONEXIONES CAPA DOMINIO ===
note top of domain : **CAPA DE DOMINIO**\nLógica de Negocio y Entidades

ProcesoEntity .down.> DomainTypes : **EstadoProceso, ProcesData**

SimuladorEntity .down.> ProcesoEntity : **manejo procesos**
SimuladorEntity .down.> DomainTypes : **ParametrosSimulacion, EstadoProceso**
SimuladorEntity .down.> GanttTypes : **Evento Gantt**
SimuladorEntity .down.> DomainUtils : **PriorityQueue**

FCFS .up.|> SchedulerBase : **herencia**
FCFS .down.> ProcesoEntity : **manejo procesos FCFS**

RR .up.|> SchedulerBase : **herencia** 
RR .down.> ProcesoEntity : **manejo procesos Round Robin**

Priority .up.|> SchedulerBase : **herencia**
Priority .down.> ProcesoEntity : **manejo procesos Priority**

SJF .up.|> SchedulerBase : **herencia**
SJF .down.> ProcesoEntity : **manejo procesos SJF**

SRTF .up.|> SchedulerBase : **herencia**
SRTF .down.> ProcesoEntity : **manejo procesos SRTF**

SchedulerBase .down.> ProcesoEntity : **tipo Proceso**
SchedulerBase .down.> GanttTypes : **EventoGantt**
SchedulerBase .down.> DomainTypes : **ParametrosSimulacion**

GanttBuilder .down.> DomainTypes : **SimEvent, GanttSlice, RunConfig**

MetricsCalc .down.> DomainTypes : **EstadoProceso**
MetricsCalc .down.> ProcesoEntity : **cálculo métricas procesos**
MetricsCalc .down.> CoreState : **SimState - estado simulación**

ServicesIndex .down.> GanttBuilder : **exporta servicio**
ServicesIndex .down.> MetricsCalc : **exporta servicio**

GanttTypes .down.> DomainTypes : **TipoEvento, EstadoProceso**
GanttEvents .down.> DomainTypes : **GanttSlice**

DomainUtils .down.> ProcesoEntity : **utilidades procesos**

Validators .down.> DomainTypes : **ProcesData, ParametrosProces, CargaTrabajo, Policy**

' === CONEXIONES CAPA CORE ===
note top of core : **CAPA CORE**\nMotor de Simulación y Estado

CoreIndex .down.> AdaptadorSim : **exporta adaptador principal**
CoreIndex .down.> MetricsCalc : **exporta calculadora métricas**
CoreIndex .down.> DomainTypes : **exporta tipos Workload**

CoreState .down.> DomainTypes : **Workload, SimEvent, Policy**
CoreState .down.> ProcesoEntity : **manejo procesos core**
CoreState .down.> RegistroEventos : **TipoEventoInterno, EventoInterno**

EventQueue .down.> CoreState : **EventoInterno, TipoEventoInterno**

PriorityQueue .down.> DomainTypes : **Policy**
PriorityQueue .down.> ProcesoEntity : **comparación procesos**

AdaptadorSim .up.> DomainTypes : **Workload**
AdaptadorSim .up.> SimuladorEntity : **simulador dominio**
AdaptadorSim .up.> ProcesoEntity : **procesos dominio**
AdaptadorSim .down.> AdaptadorEnt : **mapeo entidades**
AdaptadorSim .down.> CoreState : **SimState, EventoInterno**
AdaptadorSim .up.> FCFS : **EstrategiaSchedulerFcfs**
AdaptadorSim .up.> SJF : **EstrategiaSchedulerSjf**
AdaptadorSim .up.> SRTF : **EstrategiaSchedulerSrtf**
AdaptadorSim .up.> RR : **EstrategiaSchedulerRoundRobin**
AdaptadorSim .up.> Priority : **EstrategiaSchedulerPrioridad**

AdaptadorEnt .up.> ProcesoEntity : **mapeo procesos**
AdaptadorEnt .down.> DomainTypes : **EstadoProceso, ParametrosSimulacion, ProcesData, Algoritmo, Workload, Policy**

WorkloadAdapter .up.> DomainTypes : **Workload, ProcessSpec, RunConfig, ProcesData, ParametrosSimulacion, Algoritmo**

RegistroEventos .up.> DomainTypes : **SimEvent, TipoEvento**

CoreEvents .up.> DomainTypes : **SimEvent - DEPRECATED**

' === CONEXIONES CAPA INFRAESTRUCTURA ===
note top of infrastructure : **CAPA DE INFRAESTRUCTURA**\nParsing, I/O y Persistencia

WorkloadParser .down.> JsonParser : **parseJsonToWorkload()**
WorkloadParser .down.> TxtParser : **parseTxtToWorkload()**
WorkloadParser .up.> DomainTypes : **Workload, Policy**

JsonParser .up.> DomainTypes : **ProcessSpec, RunConfig, Workload, Policy**
JsonParser .down.> ParseError : **manejo errores parsing**

TxtParser .up.> DomainTypes : **ProcessSpec, Workload, Policy**
TxtParser .down.> ParseError : **ErrorMessages**

CsvParser .up.> DomainTypes : **ProcessSpec, RunConfig, Workload, Policy**
CsvParser .up.> Validators : **validarTandaDeProcesos()**

FileDownloader .up.> DomainTypes : **Metrics, Workload, SimEvent**
FileDownloader .down.> ExportEvents : **exportarEventosCsv()**
FileDownloader .down.> ExportMetrics : **exportarMetricasJson(), conPorcentajes()**

ExportEvents .up.> DomainTypes : **SimEvent**
ExportEvents .down.> CsvUtils : **eventosACSV(), eventoALineaCsv(), ordenarEventosParaExportar()**

ExportMetrics .up.> DomainTypes : **Metrics**

GanttExporter .up.> DomainTypes : **GanttSlice**

CsvUtils .up.> DomainTypes : **SimEvent**

EventLogger .up.> DomainTypes : **SimEvent**
EventLogger .up.> RegistroEventos : **EventoInterno, TipoEventoInterno**

' === CONEXIONES CAPA UI ===
note top of ui : **CAPA DE INTERFAZ**\nComponentes Svelte y Presentación

UITypes .up.> DomainTypes : **Policy**

ConfigPanel .up.> SimLogic : **ConfiguracionSimulacion**

TablaProcesos .up.> SimLogic : **ProcesoSimple**

IndicadoresTanda .up.> DomainTypes : **BatchMetrics**

IndicadoresProceso .up.> DomainTypes : **MetricsPerProcess**

EventosComp .up.> SimLogic : **DatosSimulacionCompleta**
EventosComp .up.> DomainTypes : **SimEvent, TipoEvento**

UtilizacionCPU .up.> DomainTypes : **BatchMetrics**

TablaComparativa .up.> SimLogic : **DatosSimulacionCompleta**

PanelExport .up.> FileDownloader : **descargarTexto(), descargarGanttJSON(), descargarMetricas()**
PanelExport .up.> ExportEvents : **exportarEventosComoCSV(), exportarEventosComoTXT(), ConfiguracionExportacion, DEFAULT_EXPORT_CONFIG**
PanelExport .up.> ExportMetrics : **exportarMetricasCSV()**
PanelExport .up.> GanttExporter : **exportarGanttSVG(), exportarGanttASCII()**
PanelExport .up.> SimLogic : **DatosSimulacionCompleta**

' === NOTAS DE ARQUITECTURA ===

note bottom of src
**ARQUITECTURA POR CAPAS - CLEAN ARCHITECTURE**

**ROUTES (Presentacion):** SvelteKit routing, paginas y layout
**APPLICATION (Aplicacion):** Casos de uso, logica de aplicacion, composables
**🏗️ DOMAIN (Dominio):** Entidades, algoritmos, servicios de dominio, tipos
**⚡ CORE (Núcleo):** Motor de simulación, adaptadores, estado, colas
**🔌 INFRASTRUCTURE (Infraestructura):** Parsers, I/O, exportación, persistencia
**🖼️ UI (Interfaz):** Componentes Svelte, estilos, tipos de UI

**Principios:**
• Dependencias fluyen hacia el dominio (Dependency Inversion)
• Separación clara de responsabilidades por capa
• Interfaces definen contratos entre capas
• Core contiene la lógica de simulación pura
• Infrastructure maneja detalles técnicos (parseo, exportación)
end note

@enduml