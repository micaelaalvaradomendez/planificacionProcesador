import { runSPN, runFCFS } from '../src/lib/engine/engine';
import type { Proceso } from '../src/lib/model/proceso';
import type { Costos } from '../src/lib/model/costos';

// Procesos dise√±ados para mostrar la diferencia entre FCFS y SPN
const procesos: Proceso[] = [
  { pid: 1, arribo: 0, rafagasCPU: [8], rafagasES: [], estado: 'N' },  // P1: 8 ticks
  { pid: 2, arribo: 1, rafagasCPU: [6], rafagasES: [], estado: 'N' },  // P2: 6 ticks (m√°s corto que P1)
  { pid: 3, arribo: 2, rafagasCPU: [3], rafagasES: [], estado: 'N' }   // P3: 3 ticks (el m√°s corto)
];

const costos: Costos = { TIP: 0, TCP: 1, TFP: 0, bloqueoES: 25 };

console.log('=== SPN vs FCFS COMPARACI√ìN ===\n');

console.log('üìã CASO DE PRUEBA:');
console.log('  P1: arribo=0, r√°faga=8 ticks');
console.log('  P2: arribo=1, r√°faga=6 ticks');
console.log('  P3: arribo=2, r√°faga=3 ticks');
console.log('');

// Ejecutar FCFS para comparaci√≥n
const traceFCFS = runFCFS(procesos, costos);
console.log('üîπ FCFS (orden de llegada):');
const orderFCFS = [];
for (const slice of traceFCFS.slices.sort((a, b) => a.start - b.start)) {
  orderFCFS.push(`P${slice.pid}(${slice.end - slice.start})`);
}
console.log(`  Orden ejecuci√≥n: ${orderFCFS.join(' ‚Üí ')}`);

// Ejecutar SPN 
const traceSPN = runSPN(procesos, costos);
console.log('\nüîπ SPN (r√°faga m√°s corta):');
const orderSPN = [];
for (const slice of traceSPN.slices.sort((a, b) => a.start - b.start)) {
  orderSPN.push(`P${slice.pid}(${slice.end - slice.start})`);
}
console.log(`  Orden ejecuci√≥n: ${orderSPN.join(' ‚Üí ')}`);

console.log('\nüìä AN√ÅLISIS DE CORRECTITUD SPN:');

// Verificar que SPN selecciona correctamente
const firstSliceSPN = traceSPN.slices.find(s => s.start === 1); // Primer despacho despu√©s de TCP
const secondSliceSPN = traceSPN.slices.find(s => s.start > 1 && s.start < 15);
const thirdSliceSPN = traceSPN.slices.find(s => s.start > 15);

console.log('  An√°lisis del orden de selecci√≥n:');
console.log(`    1er proceso ejecutado: P${firstSliceSPN?.pid} (deber√≠a ser P1, ya estaba corriendo)`);

// En t=1, cuando P2 llega, P1 ya est√° ejecutando, as√≠ que P1 contin√∫a (SPN no es preemptivo)
// En t=9 cuando P1 termina, debe elegir entre P2(6) y P3(3) ‚Üí debe elegir P3(3)
console.log(`    2do proceso ejecutado: P${secondSliceSPN?.pid} (deber√≠a ser P3, r√°faga=3 < P2(6))`);
console.log(`    3er proceso ejecutado: P${thirdSliceSPN?.pid} (deber√≠a ser P2, √∫ltimo restante)`);

// Verificaciones
const correctSecond = secondSliceSPN?.pid === 3;
const correctThird = thirdSliceSPN?.pid === 2;

console.log('\nüìã VERIFICACIONES:');
console.log(`  SPN selecciona P3 antes que P2: ${correctSecond ? '‚úÖ' : '‚ùå'}`);
console.log(`  SPN ejecuta P2 al final: ${correctThird ? '‚úÖ' : '‚ùå'}`);

if (correctSecond && correctThird) {
  console.log('  üéâ SPN IMPLEMENTADO CORRECTAMENTE');
} else {
  console.log('  ‚ùå SPN A√öN TIENE PROBLEMAS');
}

// Comparar con FCFS para mostrar la diferencia
const sameOrder = JSON.stringify(orderSPN) === JSON.stringify(orderFCFS);
console.log(`  SPN ‚â† FCFS: ${!sameOrder ? '‚úÖ' : '‚ùå'} (deben ser diferentes)`);

console.log('\n=== EVENTOS DETALLADOS SPN ===');
traceSPN.events.forEach(evt => {
  const dataStr = evt.data ? ` ${JSON.stringify(evt.data)}` : '';
  console.log(`  t=${evt.t}: ${evt.type} P${evt.pid}${dataStr}`);
});

console.log('\n=== SLICES DETALLADOS SPN ===');
traceSPN.slices.forEach(slice => {
  console.log(`  P${slice.pid}: [${slice.start}, ${slice.end}) = ${slice.end - slice.start} ticks`);
});