/**
 * Test de mensajes de error claros para archivos inv√°lidos
 * Verifica que ambos parsers den mensajes √∫tiles y espec√≠ficos
 */

import { readFileSync } from 'fs';
import { parseJsonToWorkload } from '../../src/lib/infrastructure/parsers/jsonParser';
import { parseWorkloadTxt } from '../../src/lib/infrastructure/parsers/txtParser';

console.log('üö® TEST: MENSAJES DE ERROR CLAROS');
console.log('=====================================');

// Simular File object desde contenido string
function createMockFile(content: string, filename: string, type: string = 'text/plain'): File {
  const blob = new Blob([content], { type });
  return new File([blob], filename, { type });
}

async function testErroresSintaxis(): Promise<void> {
  console.log('\n=== ERRORES DE SINTAXIS ===');
  
  // JSON malformado
  console.log('\nüß™ JSON malformado:');
  try {
    const file = createMockFile('{ "processes": [ invalid json', 'malformed.json', 'application/json');
    await parseJsonToWorkload(file);
    console.log('‚ùå No detect√≥ error de sintaxis JSON');
  } catch (error) {
    const message = error instanceof Error ? error.message : String(error);
    console.log(`‚úÖ JSON Error: "${message}"`);
    
    // Verificar que el mensaje es claro
    if (message.includes('inv√°lido') || message.includes('invalid')) {
      console.log('  ‚Üí ‚úÖ Mensaje claro y espec√≠fico');
    } else {
      console.log('  ‚Üí ‚ö†Ô∏è Mensaje podr√≠a ser m√°s claro');
    }
  }
  
  // CSV con campos faltantes
  console.log('\nüß™ CSV con campos faltantes:');
  try {
    const contenido = `nombre,tiempo_arribo
P1,0
P2,1`;
    const file = createMockFile(contenido, 'incomplete.csv', 'text/csv');
    await parseWorkloadTxt(file);
    console.log('‚ùå No detect√≥ campos faltantes en CSV');
  } catch (error) {
    const message = error instanceof Error ? error.message : String(error);
    console.log(`‚úÖ CSV Error: "${message}"`);
    
    // Verificar especificidad del mensaje
    if (message.includes('6 campos') || message.includes('columnas')) {
      console.log('  ‚Üí ‚úÖ Especifica el problema estructural');
    } else {
      console.log('  ‚Üí ‚ö†Ô∏è Podr√≠a especificar mejor el problema estructural');
    }
  }
}

async function testErroresCampos(): Promise<void> {
  console.log('\n=== ERRORES DE CAMPOS ===');
  
  // Campos faltantes en JSON
  console.log('\nüß™ Campos faltantes en JSON:');
  try {
    const contenido = `[
      {"nombre": "P1", "tiempo_arribo": 0}
    ]`;
    const file = createMockFile(contenido, 'missing_fields.json', 'application/json');
    await parseJsonToWorkload(file);
    console.log('‚ùå No detect√≥ campos faltantes en JSON');
  } catch (error) {
    const message = error instanceof Error ? error.message : String(error);
    console.log(`‚úÖ JSON Error: "${message}"`);
    
    // Verificar que menciona qu√© campo falta
    if (message.includes('cantidad_rafagas_cpu') || message.includes('requerido')) {
      console.log('  ‚Üí ‚úÖ Especifica qu√© campo falta');
    } else {
      console.log('  ‚Üí ‚ö†Ô∏è Podr√≠a especificar qu√© campo falta');
    }
  }
  
  // Tipos de datos incorrectos
  console.log('\nüß™ Tipos de datos incorrectos:');
  try {
    const contenido = `nombre,tiempo_arribo,cantidad_rafagas_cpu,duracion_rafaga_cpu,duracion_rafaga_es,prioridad_externa
P1,abc,1,5,0,50`;
    const file = createMockFile(contenido, 'invalid_types.csv', 'text/csv');
    await parseWorkloadTxt(file);
    console.log('‚ùå No detect√≥ tipo de dato incorrecto');
  } catch (error) {
    const message = error instanceof Error ? error.message : String(error);
    console.log(`‚úÖ CSV Error: "${message}"`);
    
    // Verificar que menciona el tipo de error
    if (message.includes('n√∫mero') || message.includes('valid') || message.includes('l√≠nea')) {
      console.log('  ‚Üí ‚úÖ Especifica el problema de tipo y ubicaci√≥n');
    } else {
      console.log('  ‚Üí ‚ö†Ô∏è Podr√≠a especificar mejor el problema de tipo');
    }
  }
}

async function testErroresLogicos(): Promise<void> {
  console.log('\n=== ERRORES L√ìGICOS ===');
  
  // Nombres duplicados
  console.log('\nüß™ Nombres duplicados:');
  try {
    const contenido = `[
      {"nombre": "P1", "tiempo_arribo": 0, "cantidad_rafagas_cpu": 1, "duracion_rafaga_cpu": 5, "duracion_rafaga_es": 0, "prioridad_externa": 50},
      {"nombre": "P1", "tiempo_arribo": 1, "cantidad_rafagas_cpu": 1, "duracion_rafaga_cpu": 3, "duracion_rafaga_es": 0, "prioridad_externa": 60}
    ]`;
    const file = createMockFile(contenido, 'duplicated.json', 'application/json');
    await parseJsonToWorkload(file);
    console.log('‚ùå No detect√≥ nombres duplicados');
  } catch (error) {
    const message = error instanceof Error ? error.message : String(error);
    console.log(`‚úÖ JSON Error: "${message}"`);
    
    // Verificar que lista los nombres duplicados
    if (message.includes('P1') && message.includes('duplicad')) {
      console.log('  ‚Üí ‚úÖ Lista espec√≠ficamente los nombres duplicados');
    } else {
      console.log('  ‚Üí ‚ö†Ô∏è Podr√≠a listar espec√≠ficamente los nombres duplicados');
    }
  }
  
  // Valores fuera de rango
  console.log('\nüß™ Valores fuera de rango:');
  try {
    const contenido = `nombre,tiempo_arribo,cantidad_rafagas_cpu,duracion_rafaga_cpu,duracion_rafaga_es,prioridad_externa
P1,0,1,5,0,150`;
    const file = createMockFile(contenido, 'out_of_range.csv', 'text/csv');
    await parseWorkloadTxt(file);
    console.log('‚ùå No detect√≥ valor fuera de rango');
  } catch (error) {
    const message = error instanceof Error ? error.message : String(error);
    console.log(`‚úÖ CSV Error: "${message}"`);
    
    // Verificar que especifica el rango v√°lido
    if (message.includes('100') || message.includes('<=') || message.includes('rango')) {
      console.log('  ‚Üí ‚úÖ Especifica el rango v√°lido');
    } else {
      console.log('  ‚Üí ‚ö†Ô∏è Podr√≠a especificar el rango v√°lido');
    }
  }
  
  // Valores negativos
  console.log('\nüß™ Valores negativos inv√°lidos:');
  try {
    const contenido = `nombre,tiempo_arribo,cantidad_rafagas_cpu,duracion_rafaga_cpu,duracion_rafaga_es,prioridad_externa
P1,-1,1,5,0,50`;
    const file = createMockFile(contenido, 'negative.csv', 'text/csv');
    await parseWorkloadTxt(file);
    console.log('‚ùå No detect√≥ valor negativo inv√°lido');
  } catch (error) {
    const message = error instanceof Error ? error.message : String(error);
    console.log(`‚úÖ CSV Error: "${message}"`);
    
    // Verificar que especifica que debe ser >= 0
    if (message.includes('>=') || message.includes('positivo') || message.includes('negativo')) {
      console.log('  ‚Üí ‚úÖ Especifica el requisito de valor no negativo');
    } else {
      console.log('  ‚Üí ‚ö†Ô∏è Podr√≠a especificar el requisito de valor no negativo');
    }
  }
}

async function testErroresContextuales(): Promise<void> {
  console.log('\n=== ERRORES CONTEXTUALES ===');
  
  // Archivo vac√≠o
  console.log('\nüß™ Archivo vac√≠o:');
  try {
    const file = createMockFile('', 'empty.json', 'application/json');
    await parseJsonToWorkload(file);
    console.log('‚ùå No detect√≥ archivo vac√≠o');
  } catch (error) {
    const message = error instanceof Error ? error.message : String(error);
    console.log(`‚úÖ JSON Error: "${message}"`);
    
    if (message.includes('vac√≠o') || message.includes('empty') || message.includes('inv√°lido')) {
      console.log('  ‚Üí ‚úÖ Identifica claramente el problema');
    } else {
      console.log('  ‚Üí ‚ö†Ô∏è Podr√≠a ser m√°s claro sobre el problema');
    }
  }
  
  // Solo headers, sin datos
  console.log('\nüß™ Solo headers, sin datos:');
  try {
    const contenido = `nombre,tiempo_arribo,cantidad_rafagas_cpu,duracion_rafaga_cpu,duracion_rafaga_es,prioridad_externa`;
    const file = createMockFile(contenido, 'only_headers.csv', 'text/csv');
    await parseWorkloadTxt(file);
    console.log('‚ùå No detect√≥ ausencia de datos');
  } catch (error) {
    const message = error instanceof Error ? error.message : String(error);
    console.log(`‚úÖ CSV Error: "${message}"`);
    
    if (message.includes('procesos') && (message.includes('v√°lidos') || message.includes('encontraron'))) {
      console.log('  ‚Üí ‚úÖ Explica claramente que faltan procesos');
    } else {
      console.log('  ‚Üí ‚ö†Ô∏è Podr√≠a explicar mejor que faltan procesos');
    }
  }
}

async function evaluarCalidadMensajes(): Promise<void> {
  console.log('\n=== EVALUACI√ìN DE CALIDAD ===');
  
  const criterios = [
    '1. Especificidad: ¬øEl mensaje dice exactamente qu√© est√° mal?',
    '2. Ubicaci√≥n: ¬øIndica d√≥nde est√° el problema (l√≠nea, campo)?',
    '3. Soluci√≥n: ¬øSugiere c√≥mo corregir el problema?',
    '4. Claridad: ¬øEs comprensible para el usuario?',
    '5. Consistencia: ¬øLos mensajes siguen un patr√≥n similar?'
  ];
  
  console.log('\nüìã Criterios de evaluaci√≥n:');
  for (const criterio of criterios) {
    console.log(`   ${criterio}`);
  }
  
  console.log('\nüìä An√°lisis de mejoras necesarias:');
  console.log('   ‚Ä¢ Parser TXT/CSV: Buena especificidad de l√≠neas y campos');
  console.log('   ‚Ä¢ Parser JSON: Identifica problemas pero podr√≠a ser m√°s espec√≠fico');
  console.log('   ‚Ä¢ Ambos: Podr√≠an incluir m√°s sugerencias de correcci√≥n');
  console.log('   ‚Ä¢ Consistencia: Formatos de mensaje similares pero no id√©nticos');
}

// Ejecutar todos los tests
async function ejecutarTestsErrores(): Promise<void> {
  await testErroresSintaxis();
  await testErroresCampos();
  await testErroresLogicos();
  await testErroresContextuales();
  await evaluarCalidadMensajes();
  
  console.log('\n=====================================');
  console.log('üéØ CONCLUSI√ìN: An√°lisis de mensajes de error');
  console.log('‚úÖ Ambos parsers detectan errores correctamente');
  console.log('‚ö†Ô∏è Oportunidades de mejora identificadas');
  console.log('üîß Se recomienda estandarizar formato de mensajes');
}

// Ejecutar tests
ejecutarTestsErrores().catch(console.error);
