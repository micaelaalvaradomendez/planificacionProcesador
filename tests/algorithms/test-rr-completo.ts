/**
 * Test para verificar RR (Round Robin) - Con quantum y rotaci√≥n
 */

import { MotorSimulacion } from '../../src/lib/core/engine';
import type { Workload } from '../../src/lib/model/types';

console.log('üß™ Test RR (Round Robin) - Quantum y Rotaci√≥n');
console.log('===============================================');

// Test 1: Validaci√≥n quantum > 0
console.log('\nüìã Test 1: Validaci√≥n Quantum');
try {
  const testInvalido: Workload = {
    processes: [
      { name: 'P1', tiempoArribo: 0, rafagasCPU: 1, duracionRafagaCPU: 5, duracionRafagaES: 0, prioridad: 1 }
    ],
    config: { policy: 'RR', tip: 0, tfp: 1, tcp: 1, quantum: 0 } // Quantum inv√°lido
  };
  
  new MotorSimulacion(testInvalido);
  console.log('‚ùå ERROR: Deber√≠a fallar con quantum = 0');
} catch (error) {
  console.log('‚úÖ Validaci√≥n quantum: CORRECTO');
  console.log(`   Error: ${(error as Error).message}`);
}

try {
  const testInvalido2: Workload = {
    processes: [
      { name: 'P1', tiempoArribo: 0, rafagasCPU: 1, duracionRafagaCPU: 5, duracionRafagaES: 0, prioridad: 1 }
    ],
    config: { policy: 'RR', tip: 0, tfp: 1, tcp: 1, quantum: -1 } // Quantum negativo
  };
  
  new MotorSimulacion(testInvalido2);
  console.log('‚ùå ERROR: Deber√≠a fallar con quantum negativo');
} catch (error) {
  console.log('‚úÖ Validaci√≥n quantum negativo: CORRECTO');
  console.log(`   Error: ${(error as Error).message}`);
}

// Test 2: Caso especial 1 proceso - reasignaci√≥n con TCP
console.log('\nüìã Test 2: Un Solo Proceso - Reasignaci√≥n con TCP');
const test2: Workload = {
  processes: [
    { name: 'Solo_P1', tiempoArribo: 0, rafagasCPU: 1, duracionRafagaCPU: 8, duracionRafagaES: 0, prioridad: 1 }
  ],
  config: { policy: 'RR', tip: 0, tfp: 1, tcp: 1, quantum: 3 }
};

const motor2 = new MotorSimulacion(test2);
const resultado2 = motor2.ejecutar();

console.log('üîç Eventos relevantes:');
const eventosRelevantes2 = resultado2.eventosInternos.filter(e => 
  e.tipo === 'Despacho' || e.tipo === 'AgotamientoQuantum' || e.tipo === 'FinRafagaCPU'
);
eventosRelevantes2.forEach(e => {
  console.log(`  ${e.tiempo}: ${e.tipo} - ${e.proceso}`);
});

const despachos2 = resultado2.eventosInternos.filter(e => e.tipo === 'Despacho');
const agotamientos2 = resultado2.eventosInternos.filter(e => e.tipo === 'AgotamientoQuantum');

// Deber√≠a tener m√∫ltiples despachos y agotamientos (8/3 = 2 agotamientos + 1 final)
const reasignacionUnico = despachos2.length >= 3 && agotamientos2.length >= 2;

console.log(`‚úÖ Reasignaci√≥n proceso √∫nico: ${reasignacionUnico ? 'CORRECTO' : 'INCORRECTO'}`);
console.log(`   Despachos: ${despachos2.length}, Agotamientos: ${agotamientos2.length}`);
console.log(`   Proceso se reasigna a s√≠ mismo tras agotamiento quantum`);

// Test 3: Rotaci√≥n m√∫ltiples procesos
console.log('\nüìã Test 3: Rotaci√≥n M√∫ltiples Procesos');
const test3: Workload = {
  processes: [
    { name: 'P1_6', tiempoArribo: 0, rafagasCPU: 1, duracionRafagaCPU: 6, duracionRafagaES: 0, prioridad: 1 },
    { name: 'P2_4', tiempoArribo: 1, rafagasCPU: 1, duracionRafagaCPU: 4, duracionRafagaES: 0, prioridad: 1 },
    { name: 'P3_5', tiempoArribo: 2, rafagasCPU: 1, duracionRafagaCPU: 5, duracionRafagaES: 0, prioridad: 1 }
  ],
  config: { policy: 'RR', tip: 0, tfp: 1, tcp: 1, quantum: 2 }
};

const motor3 = new MotorSimulacion(test3);
const resultado3 = motor3.ejecutar();

console.log('üîç Eventos de despacho y agotamiento:');
const eventosRR3 = resultado3.eventosInternos.filter(e => 
  e.tipo === 'Despacho' || e.tipo === 'AgotamientoQuantum'
);
eventosRR3.forEach((e, i) => {
  console.log(`  ${i + 1}. ${e.tiempo}: ${e.tipo} - ${e.proceso}`);
});

const despachos3 = resultado3.eventosInternos.filter(e => e.tipo === 'Despacho');
const ordenEjecucion3 = despachos3.map(e => e.proceso);

// Deber√≠a rotar: P1_6 ‚Üí P2_4 ‚Üí P3_5 ‚Üí P1_6 ‚Üí P2_4 ‚Üí P3_5 ‚Üí ...
const hayRotacion = despachos3.length >= 6; // M√∫ltiples rotaciones
const procesos3Diferentes = new Set(ordenEjecucion3).size === 3; // Los 3 procesos ejecutan

console.log(`‚úÖ Rotaci√≥n circular: ${hayRotacion && procesos3Diferentes ? 'CORRECTO' : 'INCORRECTO'}`);
console.log(`   Orden: ${ordenEjecucion3.join(' ‚Üí ')}`);
console.log(`   Procesos diferentes: ${new Set(ordenEjecucion3).size}/3`);

// Test 4: Quantum mayor que duraci√≥n - no deber√≠a agotar
console.log('\nüìã Test 4: Quantum Mayor que Duraci√≥n');
const test4: Workload = {
  processes: [
    { name: 'Corto_2', tiempoArribo: 0, rafagasCPU: 1, duracionRafagaCPU: 2, duracionRafagaES: 0, prioridad: 1 },
    { name: 'Corto_3', tiempoArribo: 0, rafagasCPU: 1, duracionRafagaCPU: 3, duracionRafagaES: 0, prioridad: 1 }
  ],
  config: { policy: 'RR', tip: 0, tfp: 1, tcp: 1, quantum: 5 } // Quantum > duraci√≥n
};

const motor4 = new MotorSimulacion(test4);
const resultado4 = motor4.ejecutar();

const agotamientos4 = resultado4.eventosInternos.filter(e => e.tipo === 'AgotamientoQuantum');
const finRafagas4 = resultado4.eventosInternos.filter(e => e.tipo === 'FinRafagaCPU');

console.log(`  Agotamientos quantum: ${agotamientos4.length}`);
console.log(`  Fin de r√°fagas: ${finRafagas4.length}`);

const noAgotamientoInnecesario = agotamientos4.length === 0 && finRafagas4.length === 2;

console.log(`‚úÖ Quantum mayor que duraci√≥n: ${noAgotamientoInnecesario ? 'CORRECTO' : 'INCORRECTO'}`);
console.log(`   Los procesos terminan por FinRafagaCPU, no por agotamiento`);

// Test 5: TCP aplicado en cada agotamiento
console.log('\nüìã Test 5: TCP en Agotamientos de Quantum');
const test5: Workload = {
  processes: [
    { name: 'TestTCP', tiempoArribo: 0, rafagasCPU: 1, duracionRafagaCPU: 5, duracionRafagaES: 0, prioridad: 1 }
  ],
  config: { policy: 'RR', tip: 0, tfp: 1, tcp: 2, quantum: 2 } // TCP = 2 para ver el efecto
};

const motor5 = new MotorSimulacion(test5);
const resultado5 = motor5.ejecutar();

const agotamientos5 = resultado5.eventosInternos.filter(e => e.tipo === 'AgotamientoQuantum');
const tcpEsperado = agotamientos5.length * 2; // TCP=2 por cada agotamiento

console.log(`  Agotamientos: ${agotamientos5.length}`);
console.log(`  TCP esperado por agotamientos: ${tcpEsperado}`);
console.log(`  CPU SO total: ${resultado5.estadoFinal.contadoresCPU.sistemaOperativo}`);

// Verificar que se aplic√≥ TCP en agotamientos (adem√°s del TCP inicial y TFP final)
const tcpAplicado = resultado5.estadoFinal.contadoresCPU.sistemaOperativo >= tcpEsperado;

console.log(`‚úÖ TCP aplicado en agotamientos: ${tcpAplicado ? 'CORRECTO' : 'INCORRECTO'}`);

console.log('\nüéØ RESUMEN RR (Round Robin)');
console.log('============================');
console.log(`Validaci√≥n quantum > 0: ‚úÖ PASA`);
console.log(`Reasignaci√≥n proceso √∫nico: ${reasignacionUnico ? '‚úÖ PASA' : '‚ùå FALLA'}`);
console.log(`Rotaci√≥n circular m√∫ltiple: ${hayRotacion && procesos3Diferentes ? '‚úÖ PASA' : '‚ùå FALLA'}`);
console.log(`Quantum mayor que duraci√≥n: ${noAgotamientoInnecesario ? '‚úÖ PASA' : '‚ùå FALLA'}`);
console.log(`TCP en agotamientos: ${tcpAplicado ? '‚úÖ PASA' : '‚ùå FALLA'}`);

const todosPasan = reasignacionUnico && hayRotacion && procesos3Diferentes && 
                   noAgotamientoInnecesario && tcpAplicado;
console.log(`\nüèÅ RR SCHEDULER: ${todosPasan ? 'üéâ TODOS LOS TESTS PASAN' : '‚ö†Ô∏è ALGUNOS TESTS FALLAN'}`);

if (!todosPasan) {
  console.log('\n‚ö†Ô∏è  PROBLEMA DETECTADO: Revisar implementaci√≥n de RR');
  console.log('   - Verificar reasignaci√≥n con TCP en caso de 1 proceso');
  console.log('   - Confirmar rotaci√≥n circular FIFO');
  console.log('   - Validar aplicaci√≥n de TCP en agotamientos');
}
